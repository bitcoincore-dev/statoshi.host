{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GPG Cheatsheet GPG stands for GNU Privacy Guard and it is vital tool for everyone who wants to protect the email and files. Like it's inspiration PGP, GPG uses public-key cryptography where each user owns two keys: for decryption (public key) and for encryption (private key). This cheatsheet is for quick reference and gives a brief description of that could be done with this security tool. Keys management GPG has several switches that allows to generate a public-private keypar, revoke and delete keys. The viewing public and private keys are also supported. Generate key pair To generate a public-private key pair in the GPG keyring use the \u2013gen-key switch. The below command will prompt for some details such the key-type, key-size, user ID to identify the key and the time period over which the generated key will be valid: gpg --gen-key Revoke keys In case if the secret key has been stolen, an existing key could be revoked with \u2013gen-revoke switch. To be able to do this, is is needed for a secret key: gpg --gen-revoke Delete keys The below commands are used to delete public and private keys from GPG keyring: gpg --delete-key KeyID gpg --delete-secret-key KeyID gpg --delete-secret-and-public-key KeyID View keys To view all types of keys, issue the command: gpg --list-key gpg --list-public-keys gpg --list-secret-keys Keys manipulations GPG allows several key manipulation functions such importing and exporting the keys. Sending and receiving keys from server are also supported. Export a private key to a file gpg --export-secret-key -a > file.out Export a public key in a file gpg --export --armor KeyID > file.out Import a private key from a file gpg --import --allow-secret-key-import file.in Import a public key from a file gpg --import file.in Send a public key to a server gpg --keyserver dbma.keyserver.ca --send-key KeyID Get a Key from a server gpg --keyserver dbma.keyserver.ca --recv-keys KeyID Cryptographic options GPG allows file encryption and decryption. Another option is support for file signing that makes this program an alternative to PGP. Encrypt, decrypt and sign gpg -r KeyID -e -a -o file.out file.in Decrypt file gpg -r KeyID -d -o file.out file.in Create signature of a file gpg -b -a KeyID -o file.out file.in Also, you might check the GUI frontends for GnuPG for easy GPG management","title":"Home"},{"location":"#gpg-cheatsheet","text":"GPG stands for GNU Privacy Guard and it is vital tool for everyone who wants to protect the email and files. Like it's inspiration PGP, GPG uses public-key cryptography where each user owns two keys: for decryption (public key) and for encryption (private key). This cheatsheet is for quick reference and gives a brief description of that could be done with this security tool.","title":"GPG Cheatsheet"},{"location":"#keys-management","text":"GPG has several switches that allows to generate a public-private keypar, revoke and delete keys. The viewing public and private keys are also supported.","title":"Keys management"},{"location":"#generate-key-pair","text":"To generate a public-private key pair in the GPG keyring use the \u2013gen-key switch. The below command will prompt for some details such the key-type, key-size, user ID to identify the key and the time period over which the generated key will be valid:","title":"Generate key pair"},{"location":"#gpg-gen-key","text":"","title":"gpg --gen-key"},{"location":"#revoke-keys","text":"In case if the secret key has been stolen, an existing key could be revoked with \u2013gen-revoke switch. To be able to do this, is is needed for a secret key:","title":"Revoke keys"},{"location":"#gpg-gen-revoke","text":"","title":"gpg --gen-revoke"},{"location":"#delete-keys","text":"The below commands are used to delete public and private keys from GPG keyring:","title":"Delete keys"},{"location":"#gpg-delete-key-keyid","text":"","title":"gpg --delete-key KeyID"},{"location":"#gpg-delete-secret-key-keyid","text":"","title":"gpg --delete-secret-key KeyID"},{"location":"#gpg-delete-secret-and-public-key-keyid","text":"","title":"gpg --delete-secret-and-public-key KeyID"},{"location":"#view-keys","text":"To view all types of keys, issue the command:","title":"View keys"},{"location":"#gpg-list-key","text":"","title":"gpg --list-key"},{"location":"#gpg-list-public-keys","text":"","title":"gpg --list-public-keys"},{"location":"#gpg-list-secret-keys","text":"","title":"gpg --list-secret-keys"},{"location":"#keys-manipulations","text":"GPG allows several key manipulation functions such importing and exporting the keys. Sending and receiving keys from server are also supported.","title":"Keys manipulations"},{"location":"#export-a-private-key-to-a-file","text":"","title":"Export a private key to a file"},{"location":"#gpg-export-secret-key-a-fileout","text":"","title":"gpg --export-secret-key -a &gt; file.out"},{"location":"#export-a-public-key-in-a-file","text":"","title":"Export a public key in a file"},{"location":"#gpg-export-armor-keyid-fileout","text":"","title":"gpg --export --armor KeyID &gt; file.out"},{"location":"#import-a-private-key-from-a-file","text":"","title":"Import a private key from a file"},{"location":"#gpg-import-allow-secret-key-import-filein","text":"","title":"gpg --import --allow-secret-key-import file.in"},{"location":"#import-a-public-key-from-a-file","text":"","title":"Import a public key from a file"},{"location":"#gpg-import-filein","text":"","title":"gpg --import file.in"},{"location":"#send-a-public-key-to-a-server","text":"","title":"Send a public key to a server"},{"location":"#gpg-keyserver-dbmakeyserverca-send-key-keyid","text":"","title":"gpg --keyserver dbma.keyserver.ca --send-key KeyID"},{"location":"#get-a-key-from-a-server","text":"","title":"Get a Key from a server"},{"location":"#gpg-keyserver-dbmakeyserverca-recv-keys-keyid","text":"","title":"gpg --keyserver dbma.keyserver.ca --recv-keys KeyID"},{"location":"#cryptographic-options","text":"GPG allows file encryption and decryption. Another option is support for file signing that makes this program an alternative to PGP.","title":"Cryptographic options"},{"location":"#encrypt-decrypt-and-sign","text":"","title":"Encrypt, decrypt and sign"},{"location":"#gpg-r-keyid-e-a-o-fileout-filein","text":"","title":"gpg -r KeyID -e -a -o file.out file.in"},{"location":"#decrypt-file","text":"","title":"Decrypt file"},{"location":"#gpg-r-keyid-d-o-fileout-filein","text":"","title":"gpg -r KeyID -d -o file.out file.in"},{"location":"#create-signature-of-a-file","text":"","title":"Create signature of a file"},{"location":"#gpg-b-a-keyid-o-fileout-filein","text":"","title":"gpg -b -a KeyID -o file.out file.in"},{"location":"#also-you-might-check-the-gui-frontends-for-gnupg-for-easy-gpg-management","text":"","title":"Also, you might check the GUI frontends for GnuPG for easy GPG management"},{"location":"pgp_dns/","text":"The complete guide to publishing PGP keys in DNS Introduction Publishing PGP keys is a pain. There are many disjoint keyservers, three or four networks of which, which do (or don't) share information with each other. Some are corporate, some are private. And it's a crapshoot as to whose key is going to be on which, or worse, which will have the latest copy of a person's key. For a long time, GPG has had a way to publish keys in DNS, but it hasn't been well documented. This document hopes to change that. After reading this, you should: Know the three ways to publish a key Have at least a couple tools to do so Have learned a bit more about DNS The target audience for this guide is a technical one. It's expected you understand what DNS is, and what an RFC and a resource record is. There are three ways to publish a PGP key in DNS. Most modern versions of GPG can retrieve from all three, although it's not enabled by default. There are no compile-time options you need to enable it, and it's simple to turn on. Of the three key-publishing methods, there are two that you probably shouldn't use at the same time, and there are advantages and disadvantages to each, which I hope to outline below, both in general and for each method. Advantages to DNS publishing of your keys It's universal. Your DNS is your own, and you don't have to worry about which network of vastly-disconnected keyservers is caching your key. Using DNS does not stop you from publishing via other means. If you run an organization, you can easily publish all your employee-keys via this method, and in the same step, define a signing-policy, such that a person need only assign trust to your organization's \"keysigning key\" (or the CEO's key, or the CTO's), without the trouble of running a keyserver. DNSSEC can be (somewhat) used as an additional trust-path vector. More on this in the notes at the bottom. You do not have to be searching DNS for keys in order to publish. On the same note, you do not have to be publishing in this manner to search for others there. Disadvantages to DNS publishing If you don't control your own DNS (or have a good relationship with your DNS admin), this isn't going to be as easy or even possible. Ideally, you want to be running BIND. With two of the three methods listed here, you're going to need to be able to put a CERT record into your DNS. Most web-enabled DNS tools probably will not give you this ability. The third uses TXT records, which SPF has caused to be fairly universal in web-interfaces. However, it's also the least standards-defined of the three. Using at least some of these methods, it's not always a \"set it and forget it\" procedure. You may need to periodically re-export your key and re-publish it, especially if you gain new signatures. Using some of these methods, you're going to be putting some pretty large, pretty unwiedly lines in your DNS zones. Not everyone will easily be able to retrieve them, but again, you can still publish other ways. Using some of these methods, DNS is just a means to an end: you still need to publish your key elsewhere, like a webpage, and the DNS records just point at it. Initial verifications of most of these seem to imply that only DSA keys are supported, although I welcome feedback. It seems the community is trying to get RSA keys to make a comeback. They're the only type supported by the gpg2.0 card, and they are the default keytype. There was a while where they weren't, though. Since writing this document, I've discovered that \"new\" RSA keys work, but ancient RSA keys with no subkeys tend to misbehave. Turning on key-fetching via DNS Inside your GPG \"options\" file, find the \"auto-key-locate\" line, and add \"cert\" and/or \"pka\" to the options. auto-key-locate cert pka (as well as other methods, like keyserver URLs) Don't be surprised if a lot of people don't use this method. Note that you can also turn on two options during signature verification. They are specified in a \"verify-options\" clause in your config file, or on the command line, and they are (right from the GPG manpage): pka-lookups Enable PKA lookups to verify sender addresses. Note that PKA is based on DNS, and so enabling this option may dis- close information on when and what signatures are veri- fied or to whom data is encrypted. This is similar to the \"web bug\" described for the auto-key-retrieve feature. And: pka-trust-increase Raise the trust in a signature to full if the signature passes PKA validation. This option is only meaningful if pka-lookups is set. You can also use the same options on the command line (as you'll see in this document). Types of PGP Key Records DNS PKA Records Relevant RFCs: None that I can find. Other Docs: The GPG source and mailing lists. Advantages It's a TXT record. Easy to put in a zonefile with most management software. No special tools required to generate, just three simple pieces of data. Since it uses a special subzone, you can manage the _pka namespace in a separate zonefile. GPG has an option, when verifying a signature, to look up these records (--verify-options pka-lookups), so it's doubly useful, both from a distribution and a verification point. Disadvantages As with IPGP certs, you're at the mercy of the URL. This doesn't put your key in DNS, just the location of it, and the fingerprint. Some clients may not be able to support https or http 1.1. Not RFC standard. Howto Figure out which key you want to export: gpg --list-keys danm@prime.gushi.org Warning: using insecure memory! pub 1024D/624BB249 2000-10-02 <-- I'm going to use this one. uid Daniel P. Mahoney <danm@prime.gushi.org> uid Daniel Mahoney (Secondary Email) <gushi@gushi.org> sub 2048g/DE20C529 2000-10-02 pub 1024R/309C17C5 1997-05-08 uid Daniel P. Mahoney <danm@prime.gushi.org> Export the key to a file (I use keyid.pub.asc, but it can be anything) gpg --export --armor 624BB249 > 624BB249.pub.asc Warning: using insecure memory! Get the fingerprint for your key: gpg --list-keys --fingerprint 624BB249 gpg: WARNING: using insecure memory! gpg: please see http://www.gnupg.org/faq.html for more information pub 1024D/624BB249 2000-10-02 Key fingerprint = C206 3054 5492 95F3 3490 37FF FBBE 5A30 624B B249 <-- That bit is your fingerprint. uid Daniel P. Mahoney <danm@prime.gushi.org> uid Daniel Mahoney (Secondary Email) <gushi@gushi.org> sub 2048g/DE20C529 2000-10-02 Copy the file somewhere, like your webspace. It need not live on the same server. It needs to be accessable by the url you create in the next step. cp 624BB249.pub.asc public_html/danm.pubkey.txt Make up your text record. The format is: danm._pka.prime.gushi.org. TXT \"v=pka1;fpr=C2063054549295F3349037FFFBBE5A30624BB249;uri=http://prime.gushi.org/danm.pubkey.txt\" We'll take this in several parts. The record label is simply the email address with \"._pka.\" replacing the \"@\". danm@prime.gushi.org becomes danm._pka.prime.gushi.org. Don't forget the trailing dot, if you're using the fully qualified name. I recommend sticking with fully-qualified, for simplicity. The body of the record is also simple. The v portion is just a version. There's only one version as far as I can tell, 'pka1'. The fpr is the fingerprint, with all whitespace stripped, and in uppercase. The uri is the location a key can be retrieved from. All the \"names\" are lowercase, separated by semicolons. Publish the above record in your DNS. Bump your serial number and reload your nameserver. If you're using DNSSEC, re-sign your zone. Testing Most of the tests we're going to do for these are essentially the same activity. See if our DNS server is handing out an answer, and then see if GPG can retrieve it. A simple dig: %dig +short danm._pka.prime.gushi.org. TXT \"v=pka1\\;fpr=C2063054549295F3349037FFFBBE5A30624BB249\\;uri=http://prime.gushi.org/danm.pubkey.txt\" (The backslashes before the semicolons are normal). Other than that, it seems to make sense and match what I put in.) Test it with GPG. Rather than messing around with, and adding-from and deleting from live keyrings, you can do: %echo \"foo\" | gpg --no-default-keyring --keyring /tmp/gpg-$$ --encrypt --armor --auto-key-locate pka -r you@you.com (where you@you.com is the address of your primary key.) The /tmp/gpg-$$ creates a random file named after your PID. What you should see, and what I see, is something like this: gpg: WARNING: using insecure memory! gpg: please see http://www.gnupg.org/faq.html for more information gpg: keyring /tmp/gpg-39996' created gpg: requesting key 624BB249 from http server prime.gushi.org gpg: key 624BB249: public key \"Daniel P. Mahoney <danm@prime.gushi.org>\" imported gpg: public key of ultimately trusted key CF45887D not found gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model gpg: depth: 0 valid: 1 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 1u gpg: Total number processed: 1 gpg: imported: 1 gpg: automatically retrieved danm@prime.gushi.org' via PKA gpg: DE20C529: There is no assurance this key belongs to the named user pub 2048g/DE20C529 2000-10-02 Daniel P. Mahoney danm@prime.gushi.org Primary key fingerprint: C206 3054 5492 95F3 3490 37FF FBBE 5A30 624B B249 Subkey fingerprint: CE40 B786 81E2 5CB9 F7D3 1318 9488 EB58 DE20 C529 It is NOT certain that the key belongs to the person named in the user ID. If you really know what you are doing, you may answer the next question with yes. Use this key anyway? (y/N) y -----BEGIN PGP MESSAGE----- Version: GnuPG v1.4.10 (FreeBSD) hQIOA5SI61jeIMUpEAf/UotgWP8VQC9VTY36HaZeXO1CTFk90x0qlPrAhJk9YaoA 2eHNKZSoHKqaLjzTbaWnWHnNZu0IllIS+qrAwNeIAhswfzDoc8Q9+/4sGSR3LmxA 8SEwrJIvLmGVbqJEtnH8TTHIEao/lpL/d+ul4nLfbXRn0NW+MsaCAi8UsjbLlJeV n4p0GQlpDoZCE55DTwMzfWMT84YVwuXTesuN+i7sSyJn2hT1rXuK1BCVcsgTcKdy QhIo3EfKBlfFp74yiU7QCmlAujD6U6a93mmxezPIHVx/WGXgPExVRGgEzfT/tUcI IQ2xMDUv4BF05hgm04GPGCbBY431j4UkdWWI6bvMLwgA2i01NmflH/6Z8+ss6J1M e3RWnR7TPl5lDkXFBtLGAzO+HrsC5A32SbkTw+WsljCQLifJ2EalfoJ1QGY4Sp3v H2YunwZLVPTc+D2JnrXfqNmi5zYZio8by3c8L0CgWdMwZ7PPxZpTOLN77/MIjBkJ EBb8Z6SZCgzTIhN5z56ZgWFvmSKf1vKkeUcrgxMs+DnA+XqBMJ9w520JwoTLjJza syrlYVhd+ktY21DYB9OJ5MZx2HMAtkUDRAzW1zoLcehk1kdZNzhpjU5hqSjT8/GN trKFeqkmKemrq2GvMNyJyrEOB8e7KgbmXa95YKH0Wh2D4SWpXukegyCspmY4tDE+ uckaFSao+48g8D6vs1irGSxBRjyhD/jPDblrgpo= =NbgW -----END PGP MESSAGE----- % The \"insecure memory\" warning is a silly warning that the only way to turn off is to run GPG setuid root. You can see in the output that the key comes from PKA. The \"it is NOT certain\" warning has nothing to do with the fact that it came from DNS. You will get that warning every time you use that key (or any gpg key) until you have edited it and assigned ownertrust to it, or until the key is signed with a trusted signature, either from your personal web of trust, or from a signing service like the pgp.com directory. Ask other people to run it for you and send you the resulting blob. You should be able to decrypt it with your private key. PGP CERT Records Also known as: The \"big\" CERT record. Relevant RFCs: RFC 2538, RFC 4398, specifically sections 2.1 and 3.3 Advantages DNS is all you need. You don't have to host the key elsewhere. As a DNS nerd, this strikes me as very cool. Suprisingly easy to verify with dig, if you have a base64 converter handy (openssl includes one) Disadvantages These records can get big. Really big. Especially if you have photo-ids on your keys. You can play with export-options to shrink it somewhat. Big dns packets may require EDNS, or dns-over-tcp, which not everyone supports, but support is becoming more widespread as a result of DNSSEC awareness. Requires the make-dns-cert tool, which isn't built by default. Requires you to have some control over your actual zonefile. Most control panels won't cut it. Make-dns-cert currently generates a very ugly record for this. How to As before, the first step is to figure out which key we want. %gpg --list-keys danm@prime.gushi.org Warning: using insecure memory! pub 1024D/624BB249 2000-10-02 <-- I'm going to use this one. uid Daniel P. Mahoney danm@prime.gushi.org uid Daniel Mahoney (Secondary Email) gushi@gushi.org sub 2048g/DE20C529 2000-10-02 pub 1024R/309C17C5 1997-05-08 uid Daniel P. Mahoney danm@prime.gushi.org We export the key, but this time, it needs to be binary. %gpg --export 624BB249 > 624BB249.pub.bin Warning: using insecure memory! % We run make-dns-cert on it. make-dns-cert comes with no manual or docs, but running with -h gives you all the clue you need. make-dns-cert -f fingerprint -u URL -k key file -n DNS name So then, make-dns-cert -n danm.prime.gushi.org. -k 624BB249.pub.bin $```make-dns-cert -n danm.prime.gushi.org. -k 624BB249.pub.bin danm.prime.gushi.org. TYPE37 # 1298 0003 0000 00 9901A20439D8DAF1110400F770EC6AA006076334BEC6DB6FBB237DC194BC0AB8 302C8953F04C28FC2085235D4F10EFA027234FBD63D142CCADD5213AD2B79A22C89ED9B4138370D8220D0F987F993A5364A4A7AC3D42F3765C384 71DDD0FF3372E4AE6F7BEE1E18EF464A0BEB5BBE860A08238891455EBE7CB53D567E981F78ADBD263206B0493ADCB74DD00A0FF0E9A1CD245415E CEF59435162AFCE4CDD14BC70400EA38FF501256E773DEA299404854D99F4EDB2757AA911A9C77C68AB8D6622E517A556C43D21F0523C568F016C D0DB89EF435F0D53B4E07434213F899E6578955DC2C147931E7B6901C9FD8A02705417D69A879B3CC196D2AC2EAEF311192EE89ABAF5A60942167 B4625735FCBDFB5DE0E3AC1236A53FA4D7CDD7D75F5DE85AF50400867D9546B28B79AF10541053CF4AB06A6171BFD21458BFD12AF1AE2B2401CAD 8851661F8AF6602F80EDAC99C79616BE1F910F4156242003779C68D7A079A8B18F89DD293E1B247E7420471300A4A0730AA61DE281CCC211FC405 A0A8A79877999FF9042AD892AB927DA371E8883BBB370AB7A97841408C3486BB18598CF2559BB42844616E69656C20502E204D61686F6E6579203 C64616E6D407072696D652E67757368692E6F72673E884E04101102000E050239D8DAF1040B030102021901000A0910FBBE5A30624BB249FA2E00 9B057503ED498695AE5ED73CA1B98EBAEE13F717E500A0921E0D92724459100266FEBBC29E911C8B0F530BB43244616E69656C204D61686F6E657 920285365636F6E6461727920456D61696C29203C67757368694067757368692E6F72673E8860041311020020050245D49FD7021B23060B090807 030204150208030416020301021E01021780000A0910FBBE5A30624BB249158400A082C8AF43DA8B85F740D6B1A6E9FF0B4490520B8C00A08F77D 21FBF86C842963E8090DC0646D1DD7F95C9B9020D0439D8DAF4100800F64257B7087F081772A2BAD6A942F305E8F95311394FB6F16EB94B3820DA 01A756A314E98F4055F3D007C6CB43A994ADF74C648649F80C83BD65E917D4A1D350F8F5595FDC76524F3D3D8DDBCE99E1579259CDFDB8AE744FC 5FC76BC83C5473061CE7CC966FF15F9BBFD915EC701AAD35B9E8DA0A5723AD41AF0BF4600582BE5F488FD584E49DBCD20B49DE49107366B336C38 0D451D0F7C88B31C7C5B2D8EF6F3C923C043F0A55B188D8EBB558CB85D38D334FD7C175743A31D186CDE33212CB52AFF3CE1B1294018118D7C84A 70A72D686C40319C807297ACA950CD9969FABD00A509B0246D3083D66A45D419F9C7CBD894B221926BAABA25EC355E9320B3B00020207FF5E1A3C C5DA00E1E94EC8EF6C7FE9B49D944C71D8BBC817DD8E64A7344B9E48392E0B833B3B1DB7E6D5A38BE2826DEF0060F78C6417871EAF1CFBCBC47D2 7E93718D975E0A3A36D868C021D6B771740CE2918307D69D614BBF0632DC31932EA31397A7F3B04618C9A76C2F38265C7037E303EDD8AEF03D069 208E3FE9C4EA77D83E6311ED36C013D58C54E914B263A459E22D463A0288510C4752B99C163EEA0A55686979691AB0D9F9AA0C06C834446D7A723 EC534D819301382621ACF8930C74E9FD28C8797718AEC2C30CF601E24194B799234104A3D6239657B1D4AD545BDAA637F61541435CB51B4D138FB F55E1A9FD2EED860E4459D6795B6FCCA23155A8846041811020006050239D8DAF4000A0910FBBE5A30624BB249415A009E37BCFDC64E76CBF6A86 82B85EA161BD1DFB793DF00A0C471BC7B9723535CD855D8FF1EB93F01E251B698 The program prints that all on one line. Immediately, we notice a few things. The record type isn't \"CERT\", it's \"TYPE37\". This confused me for a while until I discovered RFC3597 Basically, it's a way that a DNS server can handle a resource record it doesn't know about, by giving it some special fields like the \"#\", as well as a length (which is the 1298 you see there). The rest of the record is on one line. I wrapped it for the purposes of brevity. If I were using this in a zonefile, I would need to be careful that I wrapped it on a byte-boundary (every two characters is a byte). If I miss the boundary, named will refuse to load it, dnssec-signzone won't touch it, etc. So the thing is ugly and you don't want to touch it. The easiest way to work with it is to drop all that into a file: $```make-dns-cert -n danm.prime.gushi.org. -k 624BB249.pub.bin > 624BB249.big.cert And then either read it into your editor, or tack it on like this: %cat 624BB249.big.cert >> your.zonefile Be sure to make a backup first. Either way, you never have to copy/paste the raw hex and worry about newlines being inserted where you don't want them. Before you reload your zone, you might want to use named-checkzone on it first: prime# named-checkzone gushi.org gushi.org.hosts zone gushi.org/IN: loaded serial 2009102909 OK prime# Voice of experience: You may want to dial the TTL (which controls how long servers will cache your data) way down on the record above. It's not hard, just put a number before the TYPE37, with a space, i.e: danm.prime.gushi.org. 30 TYPE37 This way if it all goes terribly wrong, or you need to make changes, it won't be cached for very long. If it looks okay, bump your serial number and reload. Testing As above, you can dig, but you won't be able to easily read the results: $``` dig +short danm.prime.gushi.org CERT PGP 0 0 mQGiBDnY2vERBAD3cOxqoAYHYzS+xttvuyN9wZS8CrgwLIlT8Ewo/CCF I11PEO+gJyNPvWPRQsyt1SE60reaIsie2bQTg3DYIg0PmH+ZOlNkpKes PULzdlw4Rx3dD/M3Lkrm977h4Y70ZKC+tbvoYKCCOIkUVevny1PVZ+mB 94rb0mMgawSTrct03QCg/w6aHNJFQV7O9ZQ1Fir85M3RS8cEAOo4/1AS Vudz3qKZQEhU2Z9O2ydXqpEanHfGirjWYi5RelVsQ9IfBSPFaPAWzQ24 nvQ18NU7TgdDQhP4meZXiVXcLBR5Mee2kByf2KAnBUF9aah5s8wZbSrC 6u8xEZLuiauvWmCUIWe0Ylc1/L37XeDjrBI2pT+k183X119d6Fr1BACG fZVGsot5rxBUEFPPSrBqYXG/0hRYv9Eq8a4rJAHK2IUWYfivZgL4DtrJ nHlha+H5EPQVYkIAN3nGjXoHmosY+J3Sk+GyR+dCBHEwCkoHMKph3igc zCEfxAWgqKeYd5mf+QQq2JKrkn2jceiIO7s3CrepeEFAjDSGuxhZjPJV m7QoRGFuaWVsIFAuIE1haG9uZXkgPGRhbm1AcHJpbWUuZ3VzaGkub3Jn PohOBBARAgAOBQI52NrxBAsDAQICGQEACgkQ+75aMGJLskn6LgCbBXUD 7UmGla5e1zyhuY667hP3F+UAoJIeDZJyRFkQAmb+u8KekRyLD1MLtDJE YW5pZWwgTWFob25leSAoU2Vjb25kYXJ5IEVtYWlsKSA8Z3VzaGlAZ3Vz aGkub3JnPohgBBMRAgAgBQJF1J/XAhsjBgsJCAcDAgQVAggDBBYCAwEC HgECF4AACgkQ+75aMGJLskkVhACggsivQ9qLhfdA1rGm6f8LRJBSC4wA oI930h+/hshClj6AkNwGRtHdf5XJuQINBDnY2vQQCAD2Qle3CH8IF3Ki utapQvMF6PlTETlPtvFuuUs4INoBp1ajFOmPQFXz0AfGy0OplK33TGSG SfgMg71l6RfUodNQ+PVZX9x2Uk89PY3bzpnhV5JZzf24rnRPxfx2vIPF RzBhznzJZv8V+bv9kV7HAarTW56NoKVyOtQa8L9GAFgr5fSI/VhOSdvN ILSd5JEHNmszbDgNRR0PfIizHHxbLY7288kjwEPwpVsYjY67VYy4XTjT NP18F1dDox0YbN4zISy1Kv884bEpQBgRjXyEpwpy1obEAxnIByl6ypUM 2Zafq9AKUJsCRtMIPWakXUGfnHy9iUsiGSa6q6Jew1XpMgs7AAICB/9e GjzF2gDh6U7I72x/6bSdlExx2LvIF92OZKc0S55IOS4Lgzs7Hbfm1aOL 4oJt7wBg94xkF4cerxz7y8R9J+k3GNl14KOjbYaMAh1rdxdAzikYMH1p 1hS78GMtwxky6jE5en87BGGMmnbC84JlxwN+MD7diu8D0Gkgjj/pxOp3 2D5jEe02wBPVjFTpFLJjpFniLUY6AohRDEdSuZwWPuoKVWhpeWkasNn5 qgwGyDREbXpyPsU02BkwE4JiGs+JMMdOn9KMh5dxiuwsMM9gHiQZS3mS NBBKPWI5ZXsdStVFvapjf2FUFDXLUbTROPv1Xhqf0u7YYORFnWeVtvzK IxVaiEYEGBECAAYFAjnY2vQACgkQ+75aMGJLsklBWgCeN7z9xk52y/ao aCuF6hYb0d+3k98AoMRxvHuXI1Nc2FXY/x65PwHiUbaY It's still ugly, but it's not AS ugly because it's base64, which includes spaces, at least, and is easier to search for a pattern. Base64 can also be easily wrapped on any boundary, which is nice. You can run your existing exported key through a base64 converter, like the one built into the openssl binary, if you want to compare: %cat 624BB249.pub.bin | openssl enc -base64 mQGiBDnY2vERBAD3cOxqoAYHYzS+xttvuyN9wZS8CrgwLIlT8Ewo/CCFI11PEO+g JyNPvWPRQsyt1SE60reaIsie2bQTg3DYIg0PmH+ZOlNkpKesPULzdlw4Rx3dD/M3 Lkrm977h4Y70ZKC+tbvoYKCCOIkUVevny1PVZ+mB94rb0mMgawSTrct03QCg/w6a (...etc...) OPv1Xhqf0u7YYORFnWeVtvzKIxVaiEYEGBECAAYFAjnY2vQACgkQ+75aMGJLsklB WgCeN7z9xk52y/aoaCuF6hYb0d+3k98AoMRxvHuXI1Nc2FXY/x65PwHiUbaY Now, while you could compare things byte-by-byte here, what I've done as a \"casual check\" is just pick random strings in the text and see if they match up. For example, you can see that \"reaIsie2\" is present in both. They both start with and end with similar strings on every line. The real test, of course, is to see if GPG recognizes it as a valid key. By the way, since I use DNSSEC, dnssec-signzone rewrites this record into the proper \"presentation format\" for me, which is base64. If you want a similar function, you can use named-compilezone to get some of the same effects, or you can use the shell script I provide later in this document, with which you don't even need make-dns-cert. Testing with gpg As above, the command to test this is remarkably simple: %rm /tmp/gpg-* %echo \"foo\" | gpg --no-default-keyring --keyring /tmp/gpg-$$ --encrypt --armor --auto-key-locate cert -r danm@prime.gushi.org gpg: keyring /tmp/gpg-39996' created gpg: key 624BB249: public key \"Daniel P. Mahoney <danm@prime.gushi.org>\" imported gpg: Total number processed: 1 gpg: imported: 1 gpg: automatically retrieved danm@prime.gushi.org' via DNS CERT gpg: DE20C529: There is no assurance this key belongs to the named user pub 2048g/DE20C529 2000-10-02 Daniel P. Mahoney danm@prime.gushi.org Primary key fingerprint: C206 3054 5492 95F3 3490 37FF FBBE 5A30 624B B249 Subkey fingerprint: CE40 B786 81E2 5CB9 F7D3 1318 9488 EB58 DE20 C529 It is NOT certain that the key belongs to the person named in the user ID. If you *really* know what you are doing, you may answer the next question with yes. Use this key anyway? (y/N) y -----BEGIN PGP MESSAGE----- Version: GnuPG v1.4.10 (FreeBSD) hQIOA5SI61jeIMUpEAf/Sx7MKWm+e9EpUTSrDaBp4nJfDcBeqbYJulPRbDZz7eVW 2+ol6sG0jWjuirbG1YppZccEr9mgqaQujdSXb/bleD8POS0TEWuf3aPswFQvHf90 NLEzHt6BnfLoeobXXxyCflNaGX8zW+XgJtwZqAc2+jietuz8MOUhrf5m17CsW/wZ IuEqwaek+K1irJp+w3rhaE08Jzb/S4CCifeW9J3mK57chQoPOu7Nz3rY666YKp/3 9T9StOgmFiNpvtFPNy4N7hHMHvbQwRsKlnkl+a7n0Aq2+OF4d1+/k2EE4uSGgcz0 oHvee8DnuOx3P92mO4Jz5/0O0lwBD7I51iOjzUurTAgAiIM5sHV8/QFCVzH9Ule+ gd8Wo5momcphkU/AXpce5Xgi/Vm4oGQ0x0queii8afUrzkpeN5SuwgQfAdOPiXW5 2bo527jBllxOxjeBasfky82XheTnLzbAQNvQNTEM9zE7zCl1LQJUZEJ1hVzcOevI s+cm/AaGII9VkrAtSt3aLSRZuRJHFmhGvYd2Hz5WzcV1YFjXXP1eLwfetDBlaeB9 /K5v4hZBkIZPbHX0DcLVrP96mCIT4wCBYSJw+I6n0E6Fz3IfybQG2HMfqWp966/c 00ijx/aRDh42Dr/fTropuzzFzQr7weYDa1JnN3Zoftv6Zb/n+NcrmMiDCH8jJV6E uMkaeeB5Mv7ssDQ9kPhO989CHFcznrE1lgOxjX8= =NTLY -----END PGP MESSAGE----- % Okay, as above, try to decrypt that with your private key. ### IPGP CERT Records Also known as: The \"little\" or \"short\" CERT record. (These terms are purely my own). Relevant RFCs: RFC 2538, RFC 4398, specifically sections 2.1 and 3.3 IPGP certs are interesting. It's basically the same pieces of infomation that are in the PKA record, as above, except that it's supported by an RFC. Despite the RFC compliance, I am not sure if any non-gpg client knows to look for them. However, because it's a DNS cert, make-dns-cert encodes the information in binary, and your DNS server will see it in base64. So verifying it visually is harder than verifying either of the above. #### Advantages Small, easy-to-transmit records. Can use the same uri as the PKA record. #### Disadvantages Relies on the URI scheme. I haven't yet been able to get a definitive list of what uri schemes are supported, although I've seen http and finger. I've also seen reports that unless gpg is compiled against curl, http 1.1 is not supported (what this actually means is that any host that supports SSL will probably work, because of some of the nuances of SSL). With PGP certs and IPGP certs, GPG will only parse the first key it gets, so if you publish both, and one doesn't work, there's no failover. I've argued that this should be fixed. Requires make-dns-cert, which is not built in GPG by default. (But see \"A Better Way\" below) Requires publication in your main DNS zone. Despite being RFC compliant, GPG has additional trust vectors for PKA but not this, despite the fact that they share basically the same information. Harder to verify with dig. ### Howto Note that some of these steps are redundant. If you're already doing a PKA key, skip to step 5. Dig: %gpg --list-keys danm@prime.gushi.org Warning: using insecure memory! pub 1024D/624BB249 2000-10-02 <-- I'm going to use this one. uid Daniel P. Mahoney danm@prime.gushi.org uid Daniel Mahoney (Secondary Email) gushi@gushi.org sub 2048g/DE20C529 2000-10-02 pub 1024R/309C17C5 1997-05-08 uid Daniel P. Mahoney danm@prime.gushi.org Export the key to a file (I use keyid.pub.asc, but it can be anything) %gpg --export --armor 624BB249 > 624BB249.pub.asc Warning: using insecure memory! % Get the fingerprint for your key: %gpg --list-keys --fingerprint 624BB249 gpg: WARNING: using insecure memory! gpg: please see http://www.gnupg.org/faq.html for more information pub 1024D/624BB249 2000-10-02 Key fingerprint = C206 3054 5492 95F3 3490 37FF FBBE 5A30 624B B249 <-- That bit is your fingerprint. uid Daniel P. Mahoney danm@prime.gushi.org uid Daniel Mahoney (Secondary Email) gushi@gushi.org sub 2048g/DE20C529 2000-10-02 As above, run make-dns-cert. This time we use the -n, -f, and -u options: %make-dns-cert -n danm.prime.gushi.org. -f C2063054549295F3349037FFFBBE5A30624BB249 -u http://prime.gushi.org/danm.pubkey.txt danm.prime.gushi.org. TYPE37 # 64 0006 0000 00 14 C2063054549295F3349037FFFBBE5A30624BB249 687474703A2F2F7072696D652E67757368692E6F72672F64616E6D2E7075626B65792E747874 % Put the above in DNS. All on one line. Optionally add a TTL. IMPORTANT: make sure you don't have any other CERT records with the same label (i.e. a \"big\" cert, as above). While it won't break things, you have no control over which (of multiple) people will get. Reload your zone, and test. Testing will probably look VERY MUCH like the above, but here are the steps anyway: ### Testing Dig: %dig +short danm.prime.gushi.org CERT 6 0 0 FMIGMFRUkpXzNJA3//u+WjBiS7JJaHR0cDovL3ByaW1lLmd1c2hpLm9y Zy9kYW5tLnB1YmtleS50eHQ= Sadly, I haven't come across an easy way to decipher it yet, but there's always gpg. GPG: Since we're fetching the same kind of record, the command is exactly the same as before: %echo \"foo\" | gpg --no-default-keyring --keyring /tmp/gpg-$$ --encrypt --armor --auto-key-locate cert -r danm@prime.gushi.org gpg: WARNING: using insecure memory! gpg: please see http://www.gnupg.org/faq.html for more information gpg: keyring /tmp/gpg-39996' created gpg: requesting key 624BB249 from http server prime.gushi.org gpg: key 624BB249: public key \"Daniel P. Mahoney <danm@prime.gushi.org>\" imported gpg: public key of ultimately trusted key CF45887D not found gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model gpg: depth: 0 valid: 1 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 1u gpg: Total number processed: 1 gpg: imported: 1 gpg: automatically retrieved danm@prime.gushi.org' via DNS CERT gpg: DE20C529: There is no assurance this key belongs to the named user pub 2048g/DE20C529 2000-10-02 Daniel P. Mahoney danm@prime.gushi.org Primary key fingerprint: C206 3054 5492 95F3 3490 37FF FBBE 5A30 624B B249 Subkey fingerprint: CE40 B786 81E2 5CB9 F7D3 1318 9488 EB58 DE20 C529 It is NOT certain that the key belongs to the person named in the user ID. If you really know what you are doing, you may answer the next question with yes. Use this key anyway? (y/N) y -----BEGIN PGP MESSAGE----- Version: GnuPG v1.4.10 (FreeBSD) hQIOA5SI61jeIMUpEAgApZurJi3hZmDaUFjB2j93eX/lTl96xq6T//sz6nT6jcTx IPnq1RN8IrIQPjDBByHdqOZBT5hhblr9xi7NKIIv3W4q4L0z0fJx7NERPZNvn/H0 DkTwfDgAvCRxcKjenpLSwKZFwLjyfS7wjlDr3HFX7Tila0hbzplHslvgTE0QMcd7 7oNmEyOL3z+yZr/afQGp2wpzDv4YB9zOiNHcHcenqX0yrtiqKozZ9VAldi53rb/q f38lwInbveyAcEQkE2iFwhRsbMR4VLcsBoxY6D9brsBprt23ey8Rnv+bQ9IAR0VN /WYzU4zUUqb8HmpNFXQLEgH8A2BENw+bxkVYHjSfWQf/cBSGAzfBQQVJ7qp4tN0Z FRVe51dokbU4NM9tGBdCzFHWARVkQX/Ulekd4F3sxBR/sum1UOT2xl2THVBz7/Pq UCrTRPA0uH4dIbL5JpfGZhqsJ079+wmUWUtJIiO2wXi7ePEA/DrBC6p7jlmjyYN/ AeSKcPoTeLX+zryV5bECx4RO6S56EEcy0Ns0pASGMsgUnKL6Adrv3Y6ea3ZAOQMn H9Uo28BKTKNUvUaBpN8cV8jIbKYPPW9i04kvEQRqs5rdamERCY1vVTqYTrcLsNqz fF3KopX+V82X1oE2QuGdFfd8mK57ZXJL3VRUrfohQjhfYNKzougiP46rQQv79MYT j8kazWyJUuufm6NVco1/35Zdp1UhHu8qTgXxrjo= =zY9G -----END PGP MESSAGE----- % Strangely, the output doesn't say what PKA does (a PKA retrieval has a line about fetching via HTTP), however, by checking my webserver logs, I can see it retrieved it from there: %tail -200 /usr/local/apache/logs/prime.gushi.org.log | grep pubkey | tail -1 prime.gushi.org 72.9.101.130 - - [28/Oct/2009:23:50:43 -0400] \"GET /danm.pubkey.txt HTTP/1.1\" 200 4337 \"-\" \"-\" % ``` As usual, test decryption, etc. You're done. Further Steps Figure out which of these are useful to you, and use them. When someone asks for your public key, tell them to run the above command instead of mailing them your key or sending them a keyserver URL. Consider using the pka-related verify-options. Look into embracing DNSSEC. With a signed root, there's a good trust-path vector here. Who knows, maybe some day GPG will be dnssec-aware so it will give more credit to a secure DNS transaction. Without a signed root, there are still ways to have those who care about security use it, through services such as ISC's DLV registry. On DNSSEC: At present, GPG cannot see the difference between an insecure response (one from an unsigned zone) and a correctly validated one from a signed zone. (In a signed zone, an unsigned or malformed will simply get a SERVFAIL dns response). Look into sponsoring development of GPG to make it as an application more aware of this. A better way to generate records In reading over a lot of these commands, I've come across a few problems with the tools involved. They either require you to assemble large records by hand, or manipulate huge files. DNS has also come a long way since these tools were written, and RFCs have solidified that have determined the \"presentation format\" (i.e. the \"master file format\") of what CERT records should look like. On top of everything, the make-dns-cert tool is not built by default, and is not present in most binary distributions (RPM's, deb packages, FreeBSD's ports). Thus, I took it upon myself to rewrite make-dns-cert as a shell script. Advantages Extracts your key for you (takes a keyid as the argument). Formats all three record types for you, you can pipe it right into your zone file. Takes email address as an argument, generates record label. No compiling needed. Should work with most systems. Requires openssl and sed, a few other standard utilities. Generates base64-ified CERT records, split into easy, manageable pieces. Generates DNS-friendly comments, so repeating tasks are easy to reference. (Eventually) available as a tarball, or as a paste-and-go script. Arguments are in logical DNS record order emailaddress keyid [url]. Will generate an IPGP CERT record without a URI (this is legal per RFC4398). You can see sample output here, and you can view the script itself here. Depending on your MIME settings, you can probably get a download link if you go here. If you see the script rather than getting a download prompt, you can just save-as. README, Changelog, TODO coming soon. Other notes I'm not 100 percent sure (mainly because I haven't tried), but with IPGP cert, and PKA, I believe I could in theory point at a keyserver directly, for example, specify a uri of http://pgp.mit.edu:11371/pks/lookup?op=get&search=0xB0307039309C17C5. I'm a bit dubious about the question marks and equals-signs, or if I might have to uri-encode things. It's something to be tried. I'm trying to convince the GPG people that this would be much better adopted if the make-dns-cert tool was built/included by default, or if its function were included in gpg rather than a third-party tool. This is analagous as to how dnssec-keygen is used to generate SSHFP DNS records. It doesn't do any actual cryptography, just some binary conversion, so in theory it could be rewritten in pure-perl, so there's nothing to compile. I've made the argument to the GPG developers that if multiple CERT records are available, all should be tried if one fails. So far, if multiple exist, only the first received is parsed, and of course, DNS round-robins the answers by default. It took me quite a lot of trial and error to realize that there's a difference between \"modern\" RSA keys, like this: %gpg --list-keys --fingerprint gushi@prime.gushi.org pub 2048R/CF45887D 2009-10-29 Key fingerprint = FCB0 485E 050D DDFA 83C6 76E3 E722 3C05 CF45 887D uid Gushi Test <gushi@prime.gushi.org> sub 2048R/C9761244 2009-10-29 and ancient RSA keys like this pgp2.6.2 monster: %gpg --list-keys --fingerprint danm@prime.gushi.org pub 1024R/309C17C5 1997-05-08 Key fingerprint = 04 4B 1A 2E C4 62 95 73 73 A4 EA D0 08 A4 45 76 uid Daniel P. Mahoney <danm@prime.gushi.org> Note the lack of a subkey there. Note the weird fingerprint. I have not been able to get this key to properly export with gpg. If someone knows the Deep Magic, let me know. References Blog posts and list threads While researching this I came across little more than a few blog posts, and a few short discussions on the gpg-devel mailing list. A blog entry that seems to have things mostly right. GPG Mailing List Discussion which seems to date to when these features were first added. My own thread on the gnupg-users mailing list that led up to this doc. A slideshow of a talk given on PKA (really the only doc I could find with regard to PKA). Note that this is a postscript doc, for reasons I cannot fathom. RFCs RFC 3597 defines the odd format of the records that make-dns-cert generates, if it confuses you. RFC 2538, which was superseded by RFC 4398, defines the format for a CERT record. Todo At least one GPG enthusiast has suggested to me that any tools I write to handle keys should simply be able to insert them using nsupdate. I don't disagree, but there's a complicated metric there as some of these require manipulation of a site's main zone, or at the very least, many subzones. In doing this I'd also like to find out a bit about how to do nsupdate with sig(0) and KEY records, which with the right policies would mean I could do this without touching named.conf. That may be the subject of a whole other howto. (Done) I need to get the shell script cleaned up a bit more, and generate proper docs, and start tracking it with version control. I should probably get the gumption up to formally license all this stuff. For right now, I declare it under the ISC License. I'd like to track down the full list of supported URI types for PKA/IPGP CERT records. There doesn't seem to be a defined standard for it. Epilogue About the author Dan Mahoney is a Systems Admin in the Bay Area, California. In his spare time he enjoys thinking for those brief fleeting moments what he would do if he had more free time. Keyid 624BB249, or email address danm@prime.gushi.org. About this Document This document was written in gnu nano, and HTML was generated using Markdown. Markdown rocks. Originally published on my livejournal at http://gushi.livejournal.com/524199.html, its main home is at http://www.gushi.org/make-dns-cert/HOWTO.html, which is where later versions will be published. Free to use, comments to the above email address are welcome. $Id: HOWTO.txt,v 1.6 2010/05/19 20:14:49 danm Exp $ Valid XHTML 1.0 Strict","title":"Pgp dns"},{"location":"pgp_dns/#the-complete-guide-to-publishing-pgp-keys-in-dns","text":"","title":"The complete guide to publishing PGP keys in DNS"},{"location":"pgp_dns/#introduction","text":"Publishing PGP keys is a pain. There are many disjoint keyservers, three or four networks of which, which do (or don't) share information with each other. Some are corporate, some are private. And it's a crapshoot as to whose key is going to be on which, or worse, which will have the latest copy of a person's key. For a long time, GPG has had a way to publish keys in DNS, but it hasn't been well documented. This document hopes to change that. After reading this, you should: Know the three ways to publish a key Have at least a couple tools to do so Have learned a bit more about DNS The target audience for this guide is a technical one. It's expected you understand what DNS is, and what an RFC and a resource record is. There are three ways to publish a PGP key in DNS. Most modern versions of GPG can retrieve from all three, although it's not enabled by default. There are no compile-time options you need to enable it, and it's simple to turn on. Of the three key-publishing methods, there are two that you probably shouldn't use at the same time, and there are advantages and disadvantages to each, which I hope to outline below, both in general and for each method.","title":"Introduction"},{"location":"pgp_dns/#advantages-to-dns-publishing-of-your-keys","text":"It's universal. Your DNS is your own, and you don't have to worry about which network of vastly-disconnected keyservers is caching your key. Using DNS does not stop you from publishing via other means. If you run an organization, you can easily publish all your employee-keys via this method, and in the same step, define a signing-policy, such that a person need only assign trust to your organization's \"keysigning key\" (or the CEO's key, or the CTO's), without the trouble of running a keyserver. DNSSEC can be (somewhat) used as an additional trust-path vector. More on this in the notes at the bottom. You do not have to be searching DNS for keys in order to publish. On the same note, you do not have to be publishing in this manner to search for others there.","title":"Advantages to DNS publishing of your keys"},{"location":"pgp_dns/#disadvantages-to-dns-publishing","text":"If you don't control your own DNS (or have a good relationship with your DNS admin), this isn't going to be as easy or even possible. Ideally, you want to be running BIND. With two of the three methods listed here, you're going to need to be able to put a CERT record into your DNS. Most web-enabled DNS tools probably will not give you this ability. The third uses TXT records, which SPF has caused to be fairly universal in web-interfaces. However, it's also the least standards-defined of the three. Using at least some of these methods, it's not always a \"set it and forget it\" procedure. You may need to periodically re-export your key and re-publish it, especially if you gain new signatures. Using some of these methods, you're going to be putting some pretty large, pretty unwiedly lines in your DNS zones. Not everyone will easily be able to retrieve them, but again, you can still publish other ways. Using some of these methods, DNS is just a means to an end: you still need to publish your key elsewhere, like a webpage, and the DNS records just point at it. Initial verifications of most of these seem to imply that only DSA keys are supported, although I welcome feedback. It seems the community is trying to get RSA keys to make a comeback. They're the only type supported by the gpg2.0 card, and they are the default keytype. There was a while where they weren't, though. Since writing this document, I've discovered that \"new\" RSA keys work, but ancient RSA keys with no subkeys tend to misbehave.","title":"Disadvantages to DNS publishing"},{"location":"pgp_dns/#turning-on-key-fetching-via-dns","text":"Inside your GPG \"options\" file, find the \"auto-key-locate\" line, and add \"cert\" and/or \"pka\" to the options. auto-key-locate cert pka (as well as other methods, like keyserver URLs) Don't be surprised if a lot of people don't use this method. Note that you can also turn on two options during signature verification. They are specified in a \"verify-options\" clause in your config file, or on the command line, and they are (right from the GPG manpage): pka-lookups Enable PKA lookups to verify sender addresses. Note that PKA is based on DNS, and so enabling this option may dis- close information on when and what signatures are veri- fied or to whom data is encrypted. This is similar to the \"web bug\" described for the auto-key-retrieve feature. And: pka-trust-increase Raise the trust in a signature to full if the signature passes PKA validation. This option is only meaningful if pka-lookups is set. You can also use the same options on the command line (as you'll see in this document).","title":"Turning on key-fetching via DNS"},{"location":"pgp_dns/#types-of-pgp-key-records","text":"","title":"Types of PGP Key Records"},{"location":"pgp_dns/#dns-pka-records","text":"Relevant RFCs: None that I can find. Other Docs: The GPG source and mailing lists.","title":"DNS PKA Records"},{"location":"pgp_dns/#advantages","text":"It's a TXT record. Easy to put in a zonefile with most management software. No special tools required to generate, just three simple pieces of data. Since it uses a special subzone, you can manage the _pka namespace in a separate zonefile. GPG has an option, when verifying a signature, to look up these records (--verify-options pka-lookups), so it's doubly useful, both from a distribution and a verification point.","title":"Advantages"},{"location":"pgp_dns/#disadvantages","text":"As with IPGP certs, you're at the mercy of the URL. This doesn't put your key in DNS, just the location of it, and the fingerprint. Some clients may not be able to support https or http 1.1. Not RFC standard.","title":"Disadvantages"},{"location":"pgp_dns/#howto","text":"Figure out which key you want to export: gpg --list-keys danm@prime.gushi.org Warning: using insecure memory! pub 1024D/624BB249 2000-10-02 <-- I'm going to use this one. uid Daniel P. Mahoney <danm@prime.gushi.org> uid Daniel Mahoney (Secondary Email) <gushi@gushi.org> sub 2048g/DE20C529 2000-10-02 pub 1024R/309C17C5 1997-05-08 uid Daniel P. Mahoney <danm@prime.gushi.org> Export the key to a file (I use keyid.pub.asc, but it can be anything) gpg --export --armor 624BB249 > 624BB249.pub.asc Warning: using insecure memory! Get the fingerprint for your key: gpg --list-keys --fingerprint 624BB249 gpg: WARNING: using insecure memory! gpg: please see http://www.gnupg.org/faq.html for more information pub 1024D/624BB249 2000-10-02 Key fingerprint = C206 3054 5492 95F3 3490 37FF FBBE 5A30 624B B249 <-- That bit is your fingerprint. uid Daniel P. Mahoney <danm@prime.gushi.org> uid Daniel Mahoney (Secondary Email) <gushi@gushi.org> sub 2048g/DE20C529 2000-10-02 Copy the file somewhere, like your webspace. It need not live on the same server. It needs to be accessable by the url you create in the next step. cp 624BB249.pub.asc public_html/danm.pubkey.txt Make up your text record. The format is: danm._pka.prime.gushi.org. TXT \"v=pka1;fpr=C2063054549295F3349037FFFBBE5A30624BB249;uri=http://prime.gushi.org/danm.pubkey.txt\" We'll take this in several parts. The record label is simply the email address with \"._pka.\" replacing the \"@\". danm@prime.gushi.org becomes danm._pka.prime.gushi.org. Don't forget the trailing dot, if you're using the fully qualified name. I recommend sticking with fully-qualified, for simplicity. The body of the record is also simple. The v portion is just a version. There's only one version as far as I can tell, 'pka1'. The fpr is the fingerprint, with all whitespace stripped, and in uppercase. The uri is the location a key can be retrieved from. All the \"names\" are lowercase, separated by semicolons. Publish the above record in your DNS. Bump your serial number and reload your nameserver. If you're using DNSSEC, re-sign your zone.","title":"Howto"},{"location":"pgp_dns/#testing","text":"Most of the tests we're going to do for these are essentially the same activity. See if our DNS server is handing out an answer, and then see if GPG can retrieve it. A simple dig: %dig +short danm._pka.prime.gushi.org. TXT \"v=pka1\\;fpr=C2063054549295F3349037FFFBBE5A30624BB249\\;uri=http://prime.gushi.org/danm.pubkey.txt\" (The backslashes before the semicolons are normal). Other than that, it seems to make sense and match what I put in.) Test it with GPG. Rather than messing around with, and adding-from and deleting from live keyrings, you can do: %echo \"foo\" | gpg --no-default-keyring --keyring /tmp/gpg-$$ --encrypt --armor --auto-key-locate pka -r you@you.com (where you@you.com is the address of your primary key.) The /tmp/gpg-$$ creates a random file named after your PID. What you should see, and what I see, is something like this: gpg: WARNING: using insecure memory! gpg: please see http://www.gnupg.org/faq.html for more information gpg: keyring /tmp/gpg-39996' created gpg: requesting key 624BB249 from http server prime.gushi.org gpg: key 624BB249: public key \"Daniel P. Mahoney <danm@prime.gushi.org>\" imported gpg: public key of ultimately trusted key CF45887D not found gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model gpg: depth: 0 valid: 1 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 1u gpg: Total number processed: 1 gpg: imported: 1 gpg: automatically retrieved danm@prime.gushi.org' via PKA gpg: DE20C529: There is no assurance this key belongs to the named user pub 2048g/DE20C529 2000-10-02 Daniel P. Mahoney danm@prime.gushi.org Primary key fingerprint: C206 3054 5492 95F3 3490 37FF FBBE 5A30 624B B249 Subkey fingerprint: CE40 B786 81E2 5CB9 F7D3 1318 9488 EB58 DE20 C529 It is NOT certain that the key belongs to the person named in the user ID. If you really know what you are doing, you may answer the next question with yes. Use this key anyway? (y/N) y -----BEGIN PGP MESSAGE----- Version: GnuPG v1.4.10 (FreeBSD) hQIOA5SI61jeIMUpEAf/UotgWP8VQC9VTY36HaZeXO1CTFk90x0qlPrAhJk9YaoA 2eHNKZSoHKqaLjzTbaWnWHnNZu0IllIS+qrAwNeIAhswfzDoc8Q9+/4sGSR3LmxA 8SEwrJIvLmGVbqJEtnH8TTHIEao/lpL/d+ul4nLfbXRn0NW+MsaCAi8UsjbLlJeV n4p0GQlpDoZCE55DTwMzfWMT84YVwuXTesuN+i7sSyJn2hT1rXuK1BCVcsgTcKdy QhIo3EfKBlfFp74yiU7QCmlAujD6U6a93mmxezPIHVx/WGXgPExVRGgEzfT/tUcI IQ2xMDUv4BF05hgm04GPGCbBY431j4UkdWWI6bvMLwgA2i01NmflH/6Z8+ss6J1M e3RWnR7TPl5lDkXFBtLGAzO+HrsC5A32SbkTw+WsljCQLifJ2EalfoJ1QGY4Sp3v H2YunwZLVPTc+D2JnrXfqNmi5zYZio8by3c8L0CgWdMwZ7PPxZpTOLN77/MIjBkJ EBb8Z6SZCgzTIhN5z56ZgWFvmSKf1vKkeUcrgxMs+DnA+XqBMJ9w520JwoTLjJza syrlYVhd+ktY21DYB9OJ5MZx2HMAtkUDRAzW1zoLcehk1kdZNzhpjU5hqSjT8/GN trKFeqkmKemrq2GvMNyJyrEOB8e7KgbmXa95YKH0Wh2D4SWpXukegyCspmY4tDE+ uckaFSao+48g8D6vs1irGSxBRjyhD/jPDblrgpo= =NbgW -----END PGP MESSAGE----- % The \"insecure memory\" warning is a silly warning that the only way to turn off is to run GPG setuid root. You can see in the output that the key comes from PKA. The \"it is NOT certain\" warning has nothing to do with the fact that it came from DNS. You will get that warning every time you use that key (or any gpg key) until you have edited it and assigned ownertrust to it, or until the key is signed with a trusted signature, either from your personal web of trust, or from a signing service like the pgp.com directory. Ask other people to run it for you and send you the resulting blob. You should be able to decrypt it with your private key.","title":"Testing"},{"location":"pgp_dns/#pgp-cert-records","text":"Also known as: The \"big\" CERT record. Relevant RFCs: RFC 2538, RFC 4398, specifically sections 2.1 and 3.3","title":"PGP CERT Records"},{"location":"pgp_dns/#advantages_1","text":"DNS is all you need. You don't have to host the key elsewhere. As a DNS nerd, this strikes me as very cool. Suprisingly easy to verify with dig, if you have a base64 converter handy (openssl includes one)","title":"Advantages"},{"location":"pgp_dns/#disadvantages_1","text":"These records can get big. Really big. Especially if you have photo-ids on your keys. You can play with export-options to shrink it somewhat. Big dns packets may require EDNS, or dns-over-tcp, which not everyone supports, but support is becoming more widespread as a result of DNSSEC awareness. Requires the make-dns-cert tool, which isn't built by default. Requires you to have some control over your actual zonefile. Most control panels won't cut it. Make-dns-cert currently generates a very ugly record for this.","title":"Disadvantages"},{"location":"pgp_dns/#how-to","text":"As before, the first step is to figure out which key we want. %gpg --list-keys danm@prime.gushi.org Warning: using insecure memory! pub 1024D/624BB249 2000-10-02 <-- I'm going to use this one. uid Daniel P. Mahoney danm@prime.gushi.org uid Daniel Mahoney (Secondary Email) gushi@gushi.org sub 2048g/DE20C529 2000-10-02 pub 1024R/309C17C5 1997-05-08 uid Daniel P. Mahoney danm@prime.gushi.org We export the key, but this time, it needs to be binary. %gpg --export 624BB249 > 624BB249.pub.bin Warning: using insecure memory! % We run make-dns-cert on it. make-dns-cert comes with no manual or docs, but running with -h gives you all the clue you need. make-dns-cert -f fingerprint -u URL -k key file -n DNS name So then, make-dns-cert -n danm.prime.gushi.org. -k 624BB249.pub.bin $```make-dns-cert -n danm.prime.gushi.org. -k 624BB249.pub.bin danm.prime.gushi.org. TYPE37 # 1298 0003 0000 00 9901A20439D8DAF1110400F770EC6AA006076334BEC6DB6FBB237DC194BC0AB8 302C8953F04C28FC2085235D4F10EFA027234FBD63D142CCADD5213AD2B79A22C89ED9B4138370D8220D0F987F993A5364A4A7AC3D42F3765C384 71DDD0FF3372E4AE6F7BEE1E18EF464A0BEB5BBE860A08238891455EBE7CB53D567E981F78ADBD263206B0493ADCB74DD00A0FF0E9A1CD245415E CEF59435162AFCE4CDD14BC70400EA38FF501256E773DEA299404854D99F4EDB2757AA911A9C77C68AB8D6622E517A556C43D21F0523C568F016C D0DB89EF435F0D53B4E07434213F899E6578955DC2C147931E7B6901C9FD8A02705417D69A879B3CC196D2AC2EAEF311192EE89ABAF5A60942167 B4625735FCBDFB5DE0E3AC1236A53FA4D7CDD7D75F5DE85AF50400867D9546B28B79AF10541053CF4AB06A6171BFD21458BFD12AF1AE2B2401CAD 8851661F8AF6602F80EDAC99C79616BE1F910F4156242003779C68D7A079A8B18F89DD293E1B247E7420471300A4A0730AA61DE281CCC211FC405 A0A8A79877999FF9042AD892AB927DA371E8883BBB370AB7A97841408C3486BB18598CF2559BB42844616E69656C20502E204D61686F6E6579203 C64616E6D407072696D652E67757368692E6F72673E884E04101102000E050239D8DAF1040B030102021901000A0910FBBE5A30624BB249FA2E00 9B057503ED498695AE5ED73CA1B98EBAEE13F717E500A0921E0D92724459100266FEBBC29E911C8B0F530BB43244616E69656C204D61686F6E657 920285365636F6E6461727920456D61696C29203C67757368694067757368692E6F72673E8860041311020020050245D49FD7021B23060B090807 030204150208030416020301021E01021780000A0910FBBE5A30624BB249158400A082C8AF43DA8B85F740D6B1A6E9FF0B4490520B8C00A08F77D 21FBF86C842963E8090DC0646D1DD7F95C9B9020D0439D8DAF4100800F64257B7087F081772A2BAD6A942F305E8F95311394FB6F16EB94B3820DA 01A756A314E98F4055F3D007C6CB43A994ADF74C648649F80C83BD65E917D4A1D350F8F5595FDC76524F3D3D8DDBCE99E1579259CDFDB8AE744FC 5FC76BC83C5473061CE7CC966FF15F9BBFD915EC701AAD35B9E8DA0A5723AD41AF0BF4600582BE5F488FD584E49DBCD20B49DE49107366B336C38 0D451D0F7C88B31C7C5B2D8EF6F3C923C043F0A55B188D8EBB558CB85D38D334FD7C175743A31D186CDE33212CB52AFF3CE1B1294018118D7C84A 70A72D686C40319C807297ACA950CD9969FABD00A509B0246D3083D66A45D419F9C7CBD894B221926BAABA25EC355E9320B3B00020207FF5E1A3C C5DA00E1E94EC8EF6C7FE9B49D944C71D8BBC817DD8E64A7344B9E48392E0B833B3B1DB7E6D5A38BE2826DEF0060F78C6417871EAF1CFBCBC47D2 7E93718D975E0A3A36D868C021D6B771740CE2918307D69D614BBF0632DC31932EA31397A7F3B04618C9A76C2F38265C7037E303EDD8AEF03D069 208E3FE9C4EA77D83E6311ED36C013D58C54E914B263A459E22D463A0288510C4752B99C163EEA0A55686979691AB0D9F9AA0C06C834446D7A723 EC534D819301382621ACF8930C74E9FD28C8797718AEC2C30CF601E24194B799234104A3D6239657B1D4AD545BDAA637F61541435CB51B4D138FB F55E1A9FD2EED860E4459D6795B6FCCA23155A8846041811020006050239D8DAF4000A0910FBBE5A30624BB249415A009E37BCFDC64E76CBF6A86 82B85EA161BD1DFB793DF00A0C471BC7B9723535CD855D8FF1EB93F01E251B698 The program prints that all on one line. Immediately, we notice a few things. The record type isn't \"CERT\", it's \"TYPE37\". This confused me for a while until I discovered RFC3597 Basically, it's a way that a DNS server can handle a resource record it doesn't know about, by giving it some special fields like the \"#\", as well as a length (which is the 1298 you see there). The rest of the record is on one line. I wrapped it for the purposes of brevity. If I were using this in a zonefile, I would need to be careful that I wrapped it on a byte-boundary (every two characters is a byte). If I miss the boundary, named will refuse to load it, dnssec-signzone won't touch it, etc. So the thing is ugly and you don't want to touch it. The easiest way to work with it is to drop all that into a file: $```make-dns-cert -n danm.prime.gushi.org. -k 624BB249.pub.bin > 624BB249.big.cert And then either read it into your editor, or tack it on like this: %cat 624BB249.big.cert >> your.zonefile Be sure to make a backup first. Either way, you never have to copy/paste the raw hex and worry about newlines being inserted where you don't want them. Before you reload your zone, you might want to use named-checkzone on it first: prime# named-checkzone gushi.org gushi.org.hosts zone gushi.org/IN: loaded serial 2009102909 OK prime# Voice of experience: You may want to dial the TTL (which controls how long servers will cache your data) way down on the record above. It's not hard, just put a number before the TYPE37, with a space, i.e: danm.prime.gushi.org. 30 TYPE37 This way if it all goes terribly wrong, or you need to make changes, it won't be cached for very long. If it looks okay, bump your serial number and reload.","title":"How to"},{"location":"pgp_dns/#testing_1","text":"As above, you can dig, but you won't be able to easily read the results: $``` dig +short danm.prime.gushi.org CERT PGP 0 0 mQGiBDnY2vERBAD3cOxqoAYHYzS+xttvuyN9wZS8CrgwLIlT8Ewo/CCF I11PEO+gJyNPvWPRQsyt1SE60reaIsie2bQTg3DYIg0PmH+ZOlNkpKes PULzdlw4Rx3dD/M3Lkrm977h4Y70ZKC+tbvoYKCCOIkUVevny1PVZ+mB 94rb0mMgawSTrct03QCg/w6aHNJFQV7O9ZQ1Fir85M3RS8cEAOo4/1AS Vudz3qKZQEhU2Z9O2ydXqpEanHfGirjWYi5RelVsQ9IfBSPFaPAWzQ24 nvQ18NU7TgdDQhP4meZXiVXcLBR5Mee2kByf2KAnBUF9aah5s8wZbSrC 6u8xEZLuiauvWmCUIWe0Ylc1/L37XeDjrBI2pT+k183X119d6Fr1BACG fZVGsot5rxBUEFPPSrBqYXG/0hRYv9Eq8a4rJAHK2IUWYfivZgL4DtrJ nHlha+H5EPQVYkIAN3nGjXoHmosY+J3Sk+GyR+dCBHEwCkoHMKph3igc zCEfxAWgqKeYd5mf+QQq2JKrkn2jceiIO7s3CrepeEFAjDSGuxhZjPJV m7QoRGFuaWVsIFAuIE1haG9uZXkgPGRhbm1AcHJpbWUuZ3VzaGkub3Jn PohOBBARAgAOBQI52NrxBAsDAQICGQEACgkQ+75aMGJLskn6LgCbBXUD 7UmGla5e1zyhuY667hP3F+UAoJIeDZJyRFkQAmb+u8KekRyLD1MLtDJE YW5pZWwgTWFob25leSAoU2Vjb25kYXJ5IEVtYWlsKSA8Z3VzaGlAZ3Vz aGkub3JnPohgBBMRAgAgBQJF1J/XAhsjBgsJCAcDAgQVAggDBBYCAwEC HgECF4AACgkQ+75aMGJLskkVhACggsivQ9qLhfdA1rGm6f8LRJBSC4wA oI930h+/hshClj6AkNwGRtHdf5XJuQINBDnY2vQQCAD2Qle3CH8IF3Ki utapQvMF6PlTETlPtvFuuUs4INoBp1ajFOmPQFXz0AfGy0OplK33TGSG SfgMg71l6RfUodNQ+PVZX9x2Uk89PY3bzpnhV5JZzf24rnRPxfx2vIPF RzBhznzJZv8V+bv9kV7HAarTW56NoKVyOtQa8L9GAFgr5fSI/VhOSdvN ILSd5JEHNmszbDgNRR0PfIizHHxbLY7288kjwEPwpVsYjY67VYy4XTjT NP18F1dDox0YbN4zISy1Kv884bEpQBgRjXyEpwpy1obEAxnIByl6ypUM 2Zafq9AKUJsCRtMIPWakXUGfnHy9iUsiGSa6q6Jew1XpMgs7AAICB/9e GjzF2gDh6U7I72x/6bSdlExx2LvIF92OZKc0S55IOS4Lgzs7Hbfm1aOL 4oJt7wBg94xkF4cerxz7y8R9J+k3GNl14KOjbYaMAh1rdxdAzikYMH1p 1hS78GMtwxky6jE5en87BGGMmnbC84JlxwN+MD7diu8D0Gkgjj/pxOp3 2D5jEe02wBPVjFTpFLJjpFniLUY6AohRDEdSuZwWPuoKVWhpeWkasNn5 qgwGyDREbXpyPsU02BkwE4JiGs+JMMdOn9KMh5dxiuwsMM9gHiQZS3mS NBBKPWI5ZXsdStVFvapjf2FUFDXLUbTROPv1Xhqf0u7YYORFnWeVtvzK IxVaiEYEGBECAAYFAjnY2vQACgkQ+75aMGJLsklBWgCeN7z9xk52y/ao aCuF6hYb0d+3k98AoMRxvHuXI1Nc2FXY/x65PwHiUbaY It's still ugly, but it's not AS ugly because it's base64, which includes spaces, at least, and is easier to search for a pattern. Base64 can also be easily wrapped on any boundary, which is nice. You can run your existing exported key through a base64 converter, like the one built into the openssl binary, if you want to compare: %cat 624BB249.pub.bin | openssl enc -base64 mQGiBDnY2vERBAD3cOxqoAYHYzS+xttvuyN9wZS8CrgwLIlT8Ewo/CCFI11PEO+g JyNPvWPRQsyt1SE60reaIsie2bQTg3DYIg0PmH+ZOlNkpKesPULzdlw4Rx3dD/M3 Lkrm977h4Y70ZKC+tbvoYKCCOIkUVevny1PVZ+mB94rb0mMgawSTrct03QCg/w6a (...etc...) OPv1Xhqf0u7YYORFnWeVtvzKIxVaiEYEGBECAAYFAjnY2vQACgkQ+75aMGJLsklB WgCeN7z9xk52y/aoaCuF6hYb0d+3k98AoMRxvHuXI1Nc2FXY/x65PwHiUbaY Now, while you could compare things byte-by-byte here, what I've done as a \"casual check\" is just pick random strings in the text and see if they match up. For example, you can see that \"reaIsie2\" is present in both. They both start with and end with similar strings on every line. The real test, of course, is to see if GPG recognizes it as a valid key. By the way, since I use DNSSEC, dnssec-signzone rewrites this record into the proper \"presentation format\" for me, which is base64. If you want a similar function, you can use named-compilezone to get some of the same effects, or you can use the shell script I provide later in this document, with which you don't even need make-dns-cert. Testing with gpg As above, the command to test this is remarkably simple: %rm /tmp/gpg-* %echo \"foo\" | gpg --no-default-keyring --keyring /tmp/gpg-$$ --encrypt --armor --auto-key-locate cert -r danm@prime.gushi.org gpg: keyring /tmp/gpg-39996' created gpg: key 624BB249: public key \"Daniel P. Mahoney <danm@prime.gushi.org>\" imported gpg: Total number processed: 1 gpg: imported: 1 gpg: automatically retrieved danm@prime.gushi.org' via DNS CERT gpg: DE20C529: There is no assurance this key belongs to the named user pub 2048g/DE20C529 2000-10-02 Daniel P. Mahoney danm@prime.gushi.org Primary key fingerprint: C206 3054 5492 95F3 3490 37FF FBBE 5A30 624B B249 Subkey fingerprint: CE40 B786 81E2 5CB9 F7D3 1318 9488 EB58 DE20 C529 It is NOT certain that the key belongs to the person named in the user ID. If you *really* know what you are doing, you may answer the next question with yes. Use this key anyway? (y/N) y -----BEGIN PGP MESSAGE----- Version: GnuPG v1.4.10 (FreeBSD) hQIOA5SI61jeIMUpEAf/Sx7MKWm+e9EpUTSrDaBp4nJfDcBeqbYJulPRbDZz7eVW 2+ol6sG0jWjuirbG1YppZccEr9mgqaQujdSXb/bleD8POS0TEWuf3aPswFQvHf90 NLEzHt6BnfLoeobXXxyCflNaGX8zW+XgJtwZqAc2+jietuz8MOUhrf5m17CsW/wZ IuEqwaek+K1irJp+w3rhaE08Jzb/S4CCifeW9J3mK57chQoPOu7Nz3rY666YKp/3 9T9StOgmFiNpvtFPNy4N7hHMHvbQwRsKlnkl+a7n0Aq2+OF4d1+/k2EE4uSGgcz0 oHvee8DnuOx3P92mO4Jz5/0O0lwBD7I51iOjzUurTAgAiIM5sHV8/QFCVzH9Ule+ gd8Wo5momcphkU/AXpce5Xgi/Vm4oGQ0x0queii8afUrzkpeN5SuwgQfAdOPiXW5 2bo527jBllxOxjeBasfky82XheTnLzbAQNvQNTEM9zE7zCl1LQJUZEJ1hVzcOevI s+cm/AaGII9VkrAtSt3aLSRZuRJHFmhGvYd2Hz5WzcV1YFjXXP1eLwfetDBlaeB9 /K5v4hZBkIZPbHX0DcLVrP96mCIT4wCBYSJw+I6n0E6Fz3IfybQG2HMfqWp966/c 00ijx/aRDh42Dr/fTropuzzFzQr7weYDa1JnN3Zoftv6Zb/n+NcrmMiDCH8jJV6E uMkaeeB5Mv7ssDQ9kPhO989CHFcznrE1lgOxjX8= =NTLY -----END PGP MESSAGE----- % Okay, as above, try to decrypt that with your private key. ### IPGP CERT Records Also known as: The \"little\" or \"short\" CERT record. (These terms are purely my own). Relevant RFCs: RFC 2538, RFC 4398, specifically sections 2.1 and 3.3 IPGP certs are interesting. It's basically the same pieces of infomation that are in the PKA record, as above, except that it's supported by an RFC. Despite the RFC compliance, I am not sure if any non-gpg client knows to look for them. However, because it's a DNS cert, make-dns-cert encodes the information in binary, and your DNS server will see it in base64. So verifying it visually is harder than verifying either of the above. #### Advantages Small, easy-to-transmit records. Can use the same uri as the PKA record. #### Disadvantages Relies on the URI scheme. I haven't yet been able to get a definitive list of what uri schemes are supported, although I've seen http and finger. I've also seen reports that unless gpg is compiled against curl, http 1.1 is not supported (what this actually means is that any host that supports SSL will probably work, because of some of the nuances of SSL). With PGP certs and IPGP certs, GPG will only parse the first key it gets, so if you publish both, and one doesn't work, there's no failover. I've argued that this should be fixed. Requires make-dns-cert, which is not built in GPG by default. (But see \"A Better Way\" below) Requires publication in your main DNS zone. Despite being RFC compliant, GPG has additional trust vectors for PKA but not this, despite the fact that they share basically the same information. Harder to verify with dig. ### Howto Note that some of these steps are redundant. If you're already doing a PKA key, skip to step 5. Dig: %gpg --list-keys danm@prime.gushi.org Warning: using insecure memory! pub 1024D/624BB249 2000-10-02 <-- I'm going to use this one. uid Daniel P. Mahoney danm@prime.gushi.org uid Daniel Mahoney (Secondary Email) gushi@gushi.org sub 2048g/DE20C529 2000-10-02 pub 1024R/309C17C5 1997-05-08 uid Daniel P. Mahoney danm@prime.gushi.org Export the key to a file (I use keyid.pub.asc, but it can be anything) %gpg --export --armor 624BB249 > 624BB249.pub.asc Warning: using insecure memory! % Get the fingerprint for your key: %gpg --list-keys --fingerprint 624BB249 gpg: WARNING: using insecure memory! gpg: please see http://www.gnupg.org/faq.html for more information pub 1024D/624BB249 2000-10-02 Key fingerprint = C206 3054 5492 95F3 3490 37FF FBBE 5A30 624B B249 <-- That bit is your fingerprint. uid Daniel P. Mahoney danm@prime.gushi.org uid Daniel Mahoney (Secondary Email) gushi@gushi.org sub 2048g/DE20C529 2000-10-02 As above, run make-dns-cert. This time we use the -n, -f, and -u options: %make-dns-cert -n danm.prime.gushi.org. -f C2063054549295F3349037FFFBBE5A30624BB249 -u http://prime.gushi.org/danm.pubkey.txt danm.prime.gushi.org. TYPE37 # 64 0006 0000 00 14 C2063054549295F3349037FFFBBE5A30624BB249 687474703A2F2F7072696D652E67757368692E6F72672F64616E6D2E7075626B65792E747874 % Put the above in DNS. All on one line. Optionally add a TTL. IMPORTANT: make sure you don't have any other CERT records with the same label (i.e. a \"big\" cert, as above). While it won't break things, you have no control over which (of multiple) people will get. Reload your zone, and test. Testing will probably look VERY MUCH like the above, but here are the steps anyway: ### Testing Dig: %dig +short danm.prime.gushi.org CERT 6 0 0 FMIGMFRUkpXzNJA3//u+WjBiS7JJaHR0cDovL3ByaW1lLmd1c2hpLm9y Zy9kYW5tLnB1YmtleS50eHQ= Sadly, I haven't come across an easy way to decipher it yet, but there's always gpg. GPG: Since we're fetching the same kind of record, the command is exactly the same as before: %echo \"foo\" | gpg --no-default-keyring --keyring /tmp/gpg-$$ --encrypt --armor --auto-key-locate cert -r danm@prime.gushi.org gpg: WARNING: using insecure memory! gpg: please see http://www.gnupg.org/faq.html for more information gpg: keyring /tmp/gpg-39996' created gpg: requesting key 624BB249 from http server prime.gushi.org gpg: key 624BB249: public key \"Daniel P. Mahoney <danm@prime.gushi.org>\" imported gpg: public key of ultimately trusted key CF45887D not found gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model gpg: depth: 0 valid: 1 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 1u gpg: Total number processed: 1 gpg: imported: 1 gpg: automatically retrieved danm@prime.gushi.org' via DNS CERT gpg: DE20C529: There is no assurance this key belongs to the named user pub 2048g/DE20C529 2000-10-02 Daniel P. Mahoney danm@prime.gushi.org Primary key fingerprint: C206 3054 5492 95F3 3490 37FF FBBE 5A30 624B B249 Subkey fingerprint: CE40 B786 81E2 5CB9 F7D3 1318 9488 EB58 DE20 C529 It is NOT certain that the key belongs to the person named in the user ID. If you really know what you are doing, you may answer the next question with yes. Use this key anyway? (y/N) y -----BEGIN PGP MESSAGE----- Version: GnuPG v1.4.10 (FreeBSD) hQIOA5SI61jeIMUpEAgApZurJi3hZmDaUFjB2j93eX/lTl96xq6T//sz6nT6jcTx IPnq1RN8IrIQPjDBByHdqOZBT5hhblr9xi7NKIIv3W4q4L0z0fJx7NERPZNvn/H0 DkTwfDgAvCRxcKjenpLSwKZFwLjyfS7wjlDr3HFX7Tila0hbzplHslvgTE0QMcd7 7oNmEyOL3z+yZr/afQGp2wpzDv4YB9zOiNHcHcenqX0yrtiqKozZ9VAldi53rb/q f38lwInbveyAcEQkE2iFwhRsbMR4VLcsBoxY6D9brsBprt23ey8Rnv+bQ9IAR0VN /WYzU4zUUqb8HmpNFXQLEgH8A2BENw+bxkVYHjSfWQf/cBSGAzfBQQVJ7qp4tN0Z FRVe51dokbU4NM9tGBdCzFHWARVkQX/Ulekd4F3sxBR/sum1UOT2xl2THVBz7/Pq UCrTRPA0uH4dIbL5JpfGZhqsJ079+wmUWUtJIiO2wXi7ePEA/DrBC6p7jlmjyYN/ AeSKcPoTeLX+zryV5bECx4RO6S56EEcy0Ns0pASGMsgUnKL6Adrv3Y6ea3ZAOQMn H9Uo28BKTKNUvUaBpN8cV8jIbKYPPW9i04kvEQRqs5rdamERCY1vVTqYTrcLsNqz fF3KopX+V82X1oE2QuGdFfd8mK57ZXJL3VRUrfohQjhfYNKzougiP46rQQv79MYT j8kazWyJUuufm6NVco1/35Zdp1UhHu8qTgXxrjo= =zY9G -----END PGP MESSAGE----- % Strangely, the output doesn't say what PKA does (a PKA retrieval has a line about fetching via HTTP), however, by checking my webserver logs, I can see it retrieved it from there: %tail -200 /usr/local/apache/logs/prime.gushi.org.log | grep pubkey | tail -1 prime.gushi.org 72.9.101.130 - - [28/Oct/2009:23:50:43 -0400] \"GET /danm.pubkey.txt HTTP/1.1\" 200 4337 \"-\" \"-\" % ``` As usual, test decryption, etc. You're done.","title":"Testing"},{"location":"pgp_dns/#further-steps","text":"Figure out which of these are useful to you, and use them. When someone asks for your public key, tell them to run the above command instead of mailing them your key or sending them a keyserver URL. Consider using the pka-related verify-options. Look into embracing DNSSEC. With a signed root, there's a good trust-path vector here. Who knows, maybe some day GPG will be dnssec-aware so it will give more credit to a secure DNS transaction. Without a signed root, there are still ways to have those who care about security use it, through services such as ISC's DLV registry. On DNSSEC: At present, GPG cannot see the difference between an insecure response (one from an unsigned zone) and a correctly validated one from a signed zone. (In a signed zone, an unsigned or malformed will simply get a SERVFAIL dns response). Look into sponsoring development of GPG to make it as an application more aware of this.","title":"Further Steps"},{"location":"pgp_dns/#a-better-way-to-generate-records","text":"In reading over a lot of these commands, I've come across a few problems with the tools involved. They either require you to assemble large records by hand, or manipulate huge files. DNS has also come a long way since these tools were written, and RFCs have solidified that have determined the \"presentation format\" (i.e. the \"master file format\") of what CERT records should look like. On top of everything, the make-dns-cert tool is not built by default, and is not present in most binary distributions (RPM's, deb packages, FreeBSD's ports). Thus, I took it upon myself to rewrite make-dns-cert as a shell script.","title":"A better way to generate records"},{"location":"pgp_dns/#advantages_2","text":"Extracts your key for you (takes a keyid as the argument). Formats all three record types for you, you can pipe it right into your zone file. Takes email address as an argument, generates record label. No compiling needed. Should work with most systems. Requires openssl and sed, a few other standard utilities. Generates base64-ified CERT records, split into easy, manageable pieces. Generates DNS-friendly comments, so repeating tasks are easy to reference. (Eventually) available as a tarball, or as a paste-and-go script. Arguments are in logical DNS record order emailaddress keyid [url]. Will generate an IPGP CERT record without a URI (this is legal per RFC4398). You can see sample output here, and you can view the script itself here. Depending on your MIME settings, you can probably get a download link if you go here. If you see the script rather than getting a download prompt, you can just save-as. README, Changelog, TODO coming soon.","title":"Advantages"},{"location":"pgp_dns/#other-notes","text":"I'm not 100 percent sure (mainly because I haven't tried), but with IPGP cert, and PKA, I believe I could in theory point at a keyserver directly, for example, specify a uri of http://pgp.mit.edu:11371/pks/lookup?op=get&search=0xB0307039309C17C5. I'm a bit dubious about the question marks and equals-signs, or if I might have to uri-encode things. It's something to be tried. I'm trying to convince the GPG people that this would be much better adopted if the make-dns-cert tool was built/included by default, or if its function were included in gpg rather than a third-party tool. This is analagous as to how dnssec-keygen is used to generate SSHFP DNS records. It doesn't do any actual cryptography, just some binary conversion, so in theory it could be rewritten in pure-perl, so there's nothing to compile. I've made the argument to the GPG developers that if multiple CERT records are available, all should be tried if one fails. So far, if multiple exist, only the first received is parsed, and of course, DNS round-robins the answers by default. It took me quite a lot of trial and error to realize that there's a difference between \"modern\" RSA keys, like this: %gpg --list-keys --fingerprint gushi@prime.gushi.org pub 2048R/CF45887D 2009-10-29 Key fingerprint = FCB0 485E 050D DDFA 83C6 76E3 E722 3C05 CF45 887D uid Gushi Test <gushi@prime.gushi.org> sub 2048R/C9761244 2009-10-29 and ancient RSA keys like this pgp2.6.2 monster: %gpg --list-keys --fingerprint danm@prime.gushi.org pub 1024R/309C17C5 1997-05-08 Key fingerprint = 04 4B 1A 2E C4 62 95 73 73 A4 EA D0 08 A4 45 76 uid Daniel P. Mahoney <danm@prime.gushi.org> Note the lack of a subkey there. Note the weird fingerprint. I have not been able to get this key to properly export with gpg. If someone knows the Deep Magic, let me know.","title":"Other notes"},{"location":"pgp_dns/#references","text":"","title":"References"},{"location":"pgp_dns/#blog-posts-and-list-threads","text":"While researching this I came across little more than a few blog posts, and a few short discussions on the gpg-devel mailing list. A blog entry that seems to have things mostly right. GPG Mailing List Discussion which seems to date to when these features were first added. My own thread on the gnupg-users mailing list that led up to this doc. A slideshow of a talk given on PKA (really the only doc I could find with regard to PKA). Note that this is a postscript doc, for reasons I cannot fathom.","title":"Blog posts and list threads"},{"location":"pgp_dns/#rfcs","text":"RFC 3597 defines the odd format of the records that make-dns-cert generates, if it confuses you. RFC 2538, which was superseded by RFC 4398, defines the format for a CERT record.","title":"RFCs"},{"location":"pgp_dns/#todo","text":"At least one GPG enthusiast has suggested to me that any tools I write to handle keys should simply be able to insert them using nsupdate. I don't disagree, but there's a complicated metric there as some of these require manipulation of a site's main zone, or at the very least, many subzones. In doing this I'd also like to find out a bit about how to do nsupdate with sig(0) and KEY records, which with the right policies would mean I could do this without touching named.conf. That may be the subject of a whole other howto. (Done) I need to get the shell script cleaned up a bit more, and generate proper docs, and start tracking it with version control. I should probably get the gumption up to formally license all this stuff. For right now, I declare it under the ISC License. I'd like to track down the full list of supported URI types for PKA/IPGP CERT records. There doesn't seem to be a defined standard for it.","title":"Todo"},{"location":"pgp_dns/#epilogue","text":"","title":"Epilogue"},{"location":"pgp_dns/#about-the-author","text":"Dan Mahoney is a Systems Admin in the Bay Area, California. In his spare time he enjoys thinking for those brief fleeting moments what he would do if he had more free time. Keyid 624BB249, or email address danm@prime.gushi.org.","title":"About the author"},{"location":"pgp_dns/#about-this-document","text":"This document was written in gnu nano, and HTML was generated using Markdown. Markdown rocks. Originally published on my livejournal at http://gushi.livejournal.com/524199.html, its main home is at http://www.gushi.org/make-dns-cert/HOWTO.html, which is where later versions will be published. Free to use, comments to the above email address are welcome. $Id: HOWTO.txt,v 1.6 2010/05/19 20:14:49 danm Exp $ Valid XHTML 1.0 Strict","title":"About this Document"},{"location":"emzy_message/","text":"","title":"Index"},{"location":"openpgp.org/","text":"openpgp.org I encourage all visitors to participate in creating and improving content of this website to make it the new main source of information related to the OpenPGP standard. We are open for pull requests! Licenses Theme: minimal-mistakes MIT License Image Licenses All images are under Public Domain (CC0), except otherwise noted. Sources: * https://pixabay.com/en/castle-security-padlock-sure-metal-838353/ * https://pixabay.com/en/black-white-safe-chain-padlock-164164/ * https://pixabay.com/en/envelope-confidential-secret-264876/ * https://pixabay.com/en/mailbox-rome-newspaper-italy-post-1419789/ * https://pixabay.com/en/computer-accessories-monitor-336628/ * https://pixabay.com/en/buffer-china-administration-812510/ * https://pixabay.com/en/letter-stamp-wax-parchment-seal-735151/ * https://pixabay.com/en/workstation-office-business-336369/","title":"openpgp.org"},{"location":"openpgp.org/#openpgporg","text":"I encourage all visitors to participate in creating and improving content of this website to make it the new main source of information related to the OpenPGP standard. We are open for pull requests!","title":"openpgp.org"},{"location":"openpgp.org/#licenses","text":"Theme: minimal-mistakes MIT License","title":"Licenses"},{"location":"openpgp.org/#image-licenses","text":"All images are under Public Domain (CC0), except otherwise noted. Sources: * https://pixabay.com/en/castle-security-padlock-sure-metal-838353/ * https://pixabay.com/en/black-white-safe-chain-padlock-164164/ * https://pixabay.com/en/envelope-confidential-secret-264876/ * https://pixabay.com/en/mailbox-rome-newspaper-italy-post-1419789/ * https://pixabay.com/en/computer-accessories-monitor-336628/ * https://pixabay.com/en/buffer-china-administration-812510/ * https://pixabay.com/en/letter-stamp-wax-parchment-seal-735151/ * https://pixabay.com/en/workstation-office-business-336369/","title":"Image Licenses"},{"location":"openpgp.org/CHANGELOG/","text":"3.4.2 Enhancements Improve UX of static comment forms. #448 3.4.1 Enhancements Add staticman.filename configuration with UNIX timestamp for sorting data files. example ~> comment-1470943149 . Bug Fixes Don't add <a> to author name if URL is blank. 3.4.0 Enhancements Support static-based commenting via Staticman for sites hosted with GitHub Pages. #424 3.3.7 Bug Fixes Re-enabled Jekyll plugins in _config.yml in case they aren't autoloaded in Gemfile . #417 Enhancements Fallback to site.github.url for use in {{ base_path }} when site.url is nil . Replace Sass and Autoprefixer npm build scripts with Jekyll's built-in asset support . #333 Maintenance Document site.repository and its role with github-metadata gem. Add sample archive page with content for testing styles on demo site. 3.3.6 Bug Fixes Fix blank site.teaser bug. #412 3.3.5 Enhancements Add English default text site.locale strings. #407 Add Portuguese localized UI text. #411 Add Italian localized UI text. #409 Maintenance Remove unused Google AdSense variables in _config.yml . #404 Update Gemfile instructions for using github-pages vs. native jekyll gems. Disable gems: in _config.yml and enable plugins with Bundler instead. Add repository to _config.yml to suppress GitHub Pages error Liquid Exception: No repo name found. 3.3.4 Enhancements Add support for configurable feed URL to use a service like FeedBurner instead of linking directly to feed.xml in <head> and the site footer. #378 , #379 , #406 Add Turkish localized UI text. #403 Maintenance Update gems: activesupport (4.2.7), ffi (1.9.14), github-pages (88), jekyll-redirect-from (0.11.0), jekyll-watch (1.5.0). 3.3.3 Enhancements Make footer stick to the bottom of the page. Bug Fixes Fix gallery size bug #402 Maintenance Set default lang to en . 3.3.2 Bug Fixes Fix JavaScript that triggers \"sticky\" sidebar to avoid layout issues on screen sizes < 1024px . #396 3.3.1 Enhancements Enable image popup on < 500px wide screens. #385 Indicate the relationship between component URLs in a paginated series by applying rel=\"prev\" and rel=\"next\" to pages that use site.paginator . #253 Improve link posts in archive listings. #276 Maintenance Update gems: github-pages (86), ffi 1.9.13, jekyll-mentions 1.1.3, and rouge 1.11.1 Fix note about custom sidebar content appearing below author profile. #388 3.2.13 Enhancements Add English default UI text for Canada, Great Britain, and Australia. #377 Switch default locale from en-US to en . 3.2.12 Enhancements Remove window width \"magic number\" from sticky sidebar check in main.js for improved flexibility. #375 Bug Fixes Fix author override conditional where a missing authors.yml would show broken sidebar content. Defaults to site.author . #376 3.2.11 Bug Fixes Fix disappearing author sidebar links #372 Maintenance Update gems: github-pages (84), jekyll-github-metadata 2.0.2, and kramdown 1.11.1 Update vendor JavaScript: jQuery 1.12.4, Stickyfill.js 1.1.4 Update Font Awesome 4.6.3 3.2.10 Maintenance Add CONTRIBUTING.md 3.2.9 Enhancements Add support for header overlay images for Open Graph images. #358 Bug Fixes Fix Person typo Schema.org type #358 Maintenance Update github-pages gem and dependencies. Remove minutes_read to avoid awkward reading time wording #356 3.2.8 Bug Fixes Remove cursor: pointer that appears on white-space surrounding author side list items and links. #354 Maintenance Add contributing information to README.md . #357 3.2.7 Enhancements Add French localized UI text. #346 Bug Fixes Fix branch logic for Yandex and Alexa in seo.html . #348 3.2.6 Bug Fixes Fix error Liquid Exception: divided by 0 in _includes/archive-single.html, included in _layouts/single.html caused by null words_per_minute in _config.yml . #345 3.2.5 Bug Fixes Fix link color in hero overlay to be white. Remove underlines from archive item titles. 3.2.4 Enhancements Improve text alignment of masthead, hero overlay, page footer to be flush left and remove awkward white-space gaps. #342 Add Spanish localized UI text. #338 Bug Fixes Fix alignment of icons in author sidebar #341 Maintenance Add background color to page footer to set it apart from main content. #342 Add terms and privacy policy to theme's demo site. #343 Update screenshots found in theme documentation. 3.2.3 Enhancements Add Discourse as a commenting provider. #335 3.2.2 Enhancements Add support for image captions in Magnific Popup overlays via the gallery helper. #334 3.2.1 Bug Fixes Remove need for \"double tapping\" masthead menu links on iOS devices. #315 Maintenance Add ISSUE_TEMPLATE.md for improve issue submission process. 3.2.0 Bug Fixes Fix missing category/tag links in post footer due to possible conflict with site.tags and site.categories . #329 3.1.8 Bug Fixes Fix Liquid Exception: undefined method 'gsub' for nil:NilClass in _layouts/single.html error when page.title is null. <h1> element is now conditional if title: is not set for a page or collection item. #312 Maintenance Remove duplicate fa-twitter and fa-twitter-square classes from _utilities.scss . #302 Document installing additional Jekyll gem dependencies when using gem \"jekyll\" instead of gem \"github-pages\" to avoid any errors on run. #305 3.1.7 Enhancements Add translation key for \"Recent Posts\" used in home page index.html . #316 Maintenance Small fix to avoid underlying the whitespace between icons and related text when hovering. #303 3.1.6 Maintenance Update gem dependencies. Run bundle to update Gemfile.lock . 3.1.5 Maintenance Fix www and https links in author profile include #293 3.1.4 Enhancements Add overlay_filter param to hero headers #298 3.1.3 Enhancements Improve site.locale documentation #284 Remove ProTip note about protocol-less site.url as it is an anti-pattern #288 Bug Fixes Fix og_image URL in seo.html #277 Fix author_profile toggle when assigned in a _layout #285 Fix typo in build:all npm script #283 Fix URL typo documentation #287 SEO author bug. If twitter.username is set and author.twitter is nil bad things happen. #289 3.1.2 Enhancements Explain how to use nav_list helper in documentation . Reduce left/right padding on smaller screens to increase width of main content column. Bug Fixes Fix alignment issues with related posts #273 and \"Follow\" button in author profile #274 . 3.1.1 Bug Fix Fixed reading time bug when words_per_minute wasn't set in _config.yml #271 3.1.0 Enhancements Updated Font Awesome to version 4.6.1 Added optional GitHub and Bitbucket links to footer if set on site.author in _config.yml . Bug Fixes Fixed Bitbucket URL typo in author sidebar. 3.0.3 Enhancements Rebuilt the entire theme: layouts, includes, stylesheets, scripts, you name it. Refreshed the look and feel while staying true to the original design of the theme (author sidebar/main content). Replaced grid system with Susy . Replaced Grunt tasks with npm scripts. Removed Google Fonts and replaced with system fonts to improve performance (they can be added back if desired) Greatly improved theme documentation . Increased the amount of sample posts, sample pages, and sample collections to throughly test the theme and edge-cases. Moved all sample content and assets out of master to keep it as clean as possible for forking. Added new layouts for splash pages, archives for jekyll-archives if enabled, and compress.html to improve performance. Added taxonomy links to posts (tags and categories). Added optional \"reading time\" meta data. Improved Liquid used for Twitter Cards and Open Graph data in <head> . Improved gallery include helper and added feature_row for use with splash page layout. Added Keybase.io, author web URI, and Bitbucket optional links to sidebar. Add feed.xml link to footer. Added a UI text data file to easily change all text found in the theme. Added LinkedIn to optional social share buttons. Added Facebook, Google+, and custom commenting options in addition to Disqus. Added optional breadcrumb links. 2.2.1 2.2.0 Enhancements Add support for Jekyll 3.0 Minor updates to syntax highlighting CSS and theme documentation 2.1.3 Enhancements Cleaner print styles that remove the top navigation, social sharing buttons, and other elements not needed when printed. 2.1.2 Enhancements Add optional CodePen icon/url to author side bar #156 Documented Stackoverflow username explanation in _config.yml #157 Simplified Liquid in post-index.html to better handle year listings #166 Bug Fixes Cleanup Facebook related Open Graph meta tags #149 Corrected minor typos #158 #175 2.1.1 Enhancements Add optional XING profile link to author sidebar Include open graph meta tags for feature image (if assigned) #149 Create an include for feed footer Bug Fixes Remove http protocol from Google search form on sample 404 page Only show related posts if there are one or more available Fix alignment of email address link in author sidebar 2.1.0 Enhancements Add optional social sharing buttons ( #42 ) Add Soundcloud, YouTube ( #95 ), Flickr ( #119 ), and Weibo ( #116 ) icons for use in author sidebar. Fix typos in posts and documentation and remove references to Less Include note about Octopress gem being optional Post author override support extended to the Atom feed ( #71 ) Only include email address in feed if specified in _config.yml or author _data Wrap all page content in #main to harmonize article and post index styles ( #86 ) Include new sample feature images for posts and pages Table of contents improvements: fix collapse toggle, indent nested elements, show on small screens, and create an _include for reusing in posts and pages. Include note about running Jekyll with bundle exec when using Bundler Fix home page path in top navigation Remove Google Authorship ( #120 ) Remove duplicate author content that displayed in div.article-author-bottom Removed unused _sass/print.scss styles Improve comments in .scss files 2.0.0 1.3.3 Enhancements Added new icons and profile links for Stackoverflow, Dribbble, Pinterest, Foursquare, and Steam to the author bio sidebar. Cleaned up the Kramdown auto table of contents styling to be more readable Removed page width specific .less stylesheets and created mixins for easier updating Removed Modernizr since it wasn't being used Added pages to sitemap.xml Added category: to rake new_post task Minor typographic changes Bug Fixes Corrected various broken links in README and Theme Setup. 1.3.1 Enhancements Cleaned up table of contents styling Reworked top navigation to be a better experience on small screens. Nav items now display vertically when the menu button is tapped, revealing links with larger touch targets. 1.2.0 Bug Fixes Table weren't filling the entire width of the content container. They now scale at 100%. Thanks @dhruvbhatia Enhancements Decreased spacing between Markdown footnotes Removed dark background on footer Removed UPPERCASE styling on post titles in the index listing 1.1.4 Bug Fixes Fix top navigation bug issue ( #10 ) for real this time. Remember to clear your floats kids. 1.1.3 Bug Fixes Fix top navigation links that weren't click able on small viewports (Issue #10 ). Remove line wrap from top navigation links that may span multiple lines. 1.1.2 Enhancements Added Grunt build script for compiling Less/JavaScript and optimizing image assets. Added support for large image summary Twitter card. Stylesheet adjustments 1.1.1 Bug Fixes Removed Typeplate styles. Was causing issues with newer versions of Less and is no longer maintained. Enhancements Added image attribution for post and page feature images. Added 404 page . Cleaned up various Less variables to better align with naming conventions used in other MM Jekyll themes. Removed Chrome Frame references. Added global CSS3 transitions to text and block elements. Improved typography in a few places. 1.0.2 Enhancements Google Analytics, Google Authorship, webmaster verifies, and Twitter card meta are now optional. 1.0.1","title":"CHANGELOG"},{"location":"openpgp.org/CHANGELOG/#342","text":"","title":"3.4.2"},{"location":"openpgp.org/CHANGELOG/#enhancements","text":"Improve UX of static comment forms. #448","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#341","text":"","title":"3.4.1"},{"location":"openpgp.org/CHANGELOG/#enhancements_1","text":"Add staticman.filename configuration with UNIX timestamp for sorting data files. example ~> comment-1470943149 .","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#bug-fixes","text":"Don't add <a> to author name if URL is blank.","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#340","text":"","title":"3.4.0"},{"location":"openpgp.org/CHANGELOG/#enhancements_2","text":"Support static-based commenting via Staticman for sites hosted with GitHub Pages. #424","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#337","text":"","title":"3.3.7"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_1","text":"Re-enabled Jekyll plugins in _config.yml in case they aren't autoloaded in Gemfile . #417","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#enhancements_3","text":"Fallback to site.github.url for use in {{ base_path }} when site.url is nil . Replace Sass and Autoprefixer npm build scripts with Jekyll's built-in asset support . #333","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#maintenance","text":"Document site.repository and its role with github-metadata gem. Add sample archive page with content for testing styles on demo site.","title":"Maintenance"},{"location":"openpgp.org/CHANGELOG/#336","text":"","title":"3.3.6"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_2","text":"Fix blank site.teaser bug. #412","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#335","text":"","title":"3.3.5"},{"location":"openpgp.org/CHANGELOG/#enhancements_4","text":"Add English default text site.locale strings. #407 Add Portuguese localized UI text. #411 Add Italian localized UI text. #409","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#maintenance_1","text":"Remove unused Google AdSense variables in _config.yml . #404 Update Gemfile instructions for using github-pages vs. native jekyll gems. Disable gems: in _config.yml and enable plugins with Bundler instead. Add repository to _config.yml to suppress GitHub Pages error Liquid Exception: No repo name found.","title":"Maintenance"},{"location":"openpgp.org/CHANGELOG/#334","text":"","title":"3.3.4"},{"location":"openpgp.org/CHANGELOG/#enhancements_5","text":"Add support for configurable feed URL to use a service like FeedBurner instead of linking directly to feed.xml in <head> and the site footer. #378 , #379 , #406 Add Turkish localized UI text. #403","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#maintenance_2","text":"Update gems: activesupport (4.2.7), ffi (1.9.14), github-pages (88), jekyll-redirect-from (0.11.0), jekyll-watch (1.5.0).","title":"Maintenance"},{"location":"openpgp.org/CHANGELOG/#333","text":"","title":"3.3.3"},{"location":"openpgp.org/CHANGELOG/#enhancements_6","text":"Make footer stick to the bottom of the page.","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_3","text":"Fix gallery size bug #402","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#maintenance_3","text":"Set default lang to en .","title":"Maintenance"},{"location":"openpgp.org/CHANGELOG/#332","text":"","title":"3.3.2"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_4","text":"Fix JavaScript that triggers \"sticky\" sidebar to avoid layout issues on screen sizes < 1024px . #396","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#331","text":"","title":"3.3.1"},{"location":"openpgp.org/CHANGELOG/#enhancements_7","text":"Enable image popup on < 500px wide screens. #385 Indicate the relationship between component URLs in a paginated series by applying rel=\"prev\" and rel=\"next\" to pages that use site.paginator . #253 Improve link posts in archive listings. #276","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#maintenance_4","text":"Update gems: github-pages (86), ffi 1.9.13, jekyll-mentions 1.1.3, and rouge 1.11.1 Fix note about custom sidebar content appearing below author profile. #388","title":"Maintenance"},{"location":"openpgp.org/CHANGELOG/#3213","text":"","title":"3.2.13"},{"location":"openpgp.org/CHANGELOG/#enhancements_8","text":"Add English default UI text for Canada, Great Britain, and Australia. #377 Switch default locale from en-US to en .","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#3212","text":"","title":"3.2.12"},{"location":"openpgp.org/CHANGELOG/#enhancements_9","text":"Remove window width \"magic number\" from sticky sidebar check in main.js for improved flexibility. #375","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_5","text":"Fix author override conditional where a missing authors.yml would show broken sidebar content. Defaults to site.author . #376","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#3211","text":"","title":"3.2.11"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_6","text":"Fix disappearing author sidebar links #372","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#maintenance_5","text":"Update gems: github-pages (84), jekyll-github-metadata 2.0.2, and kramdown 1.11.1 Update vendor JavaScript: jQuery 1.12.4, Stickyfill.js 1.1.4 Update Font Awesome 4.6.3","title":"Maintenance"},{"location":"openpgp.org/CHANGELOG/#3210","text":"","title":"3.2.10"},{"location":"openpgp.org/CHANGELOG/#maintenance_6","text":"Add CONTRIBUTING.md","title":"Maintenance"},{"location":"openpgp.org/CHANGELOG/#329","text":"","title":"3.2.9"},{"location":"openpgp.org/CHANGELOG/#enhancements_10","text":"Add support for header overlay images for Open Graph images. #358","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_7","text":"Fix Person typo Schema.org type #358","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#maintenance_7","text":"Update github-pages gem and dependencies. Remove minutes_read to avoid awkward reading time wording #356","title":"Maintenance"},{"location":"openpgp.org/CHANGELOG/#328","text":"","title":"3.2.8"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_8","text":"Remove cursor: pointer that appears on white-space surrounding author side list items and links. #354","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#maintenance_8","text":"Add contributing information to README.md . #357","title":"Maintenance"},{"location":"openpgp.org/CHANGELOG/#327","text":"","title":"3.2.7"},{"location":"openpgp.org/CHANGELOG/#enhancements_11","text":"Add French localized UI text. #346","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_9","text":"Fix branch logic for Yandex and Alexa in seo.html . #348","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#326","text":"","title":"3.2.6"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_10","text":"Fix error Liquid Exception: divided by 0 in _includes/archive-single.html, included in _layouts/single.html caused by null words_per_minute in _config.yml . #345","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#325","text":"","title":"3.2.5"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_11","text":"Fix link color in hero overlay to be white. Remove underlines from archive item titles.","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#324","text":"","title":"3.2.4"},{"location":"openpgp.org/CHANGELOG/#enhancements_12","text":"Improve text alignment of masthead, hero overlay, page footer to be flush left and remove awkward white-space gaps. #342 Add Spanish localized UI text. #338","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_12","text":"Fix alignment of icons in author sidebar #341","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#maintenance_9","text":"Add background color to page footer to set it apart from main content. #342 Add terms and privacy policy to theme's demo site. #343 Update screenshots found in theme documentation.","title":"Maintenance"},{"location":"openpgp.org/CHANGELOG/#323","text":"","title":"3.2.3"},{"location":"openpgp.org/CHANGELOG/#enhancements_13","text":"Add Discourse as a commenting provider. #335","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#322","text":"","title":"3.2.2"},{"location":"openpgp.org/CHANGELOG/#enhancements_14","text":"Add support for image captions in Magnific Popup overlays via the gallery helper. #334","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#321","text":"","title":"3.2.1"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_13","text":"Remove need for \"double tapping\" masthead menu links on iOS devices. #315","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#maintenance_10","text":"Add ISSUE_TEMPLATE.md for improve issue submission process.","title":"Maintenance"},{"location":"openpgp.org/CHANGELOG/#320","text":"","title":"3.2.0"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_14","text":"Fix missing category/tag links in post footer due to possible conflict with site.tags and site.categories . #329","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#318","text":"","title":"3.1.8"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_15","text":"Fix Liquid Exception: undefined method 'gsub' for nil:NilClass in _layouts/single.html error when page.title is null. <h1> element is now conditional if title: is not set for a page or collection item. #312","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#maintenance_11","text":"Remove duplicate fa-twitter and fa-twitter-square classes from _utilities.scss . #302 Document installing additional Jekyll gem dependencies when using gem \"jekyll\" instead of gem \"github-pages\" to avoid any errors on run. #305","title":"Maintenance"},{"location":"openpgp.org/CHANGELOG/#317","text":"","title":"3.1.7"},{"location":"openpgp.org/CHANGELOG/#enhancements_15","text":"Add translation key for \"Recent Posts\" used in home page index.html . #316","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#maintenance_12","text":"Small fix to avoid underlying the whitespace between icons and related text when hovering. #303","title":"Maintenance"},{"location":"openpgp.org/CHANGELOG/#316","text":"","title":"3.1.6"},{"location":"openpgp.org/CHANGELOG/#maintenance_13","text":"Update gem dependencies. Run bundle to update Gemfile.lock .","title":"Maintenance"},{"location":"openpgp.org/CHANGELOG/#315","text":"","title":"3.1.5"},{"location":"openpgp.org/CHANGELOG/#maintenance_14","text":"Fix www and https links in author profile include #293","title":"Maintenance"},{"location":"openpgp.org/CHANGELOG/#314","text":"","title":"3.1.4"},{"location":"openpgp.org/CHANGELOG/#enhancements_16","text":"Add overlay_filter param to hero headers #298","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#313","text":"","title":"3.1.3"},{"location":"openpgp.org/CHANGELOG/#enhancements_17","text":"Improve site.locale documentation #284 Remove ProTip note about protocol-less site.url as it is an anti-pattern #288","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_16","text":"Fix og_image URL in seo.html #277 Fix author_profile toggle when assigned in a _layout #285 Fix typo in build:all npm script #283 Fix URL typo documentation #287 SEO author bug. If twitter.username is set and author.twitter is nil bad things happen. #289","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#312","text":"","title":"3.1.2"},{"location":"openpgp.org/CHANGELOG/#enhancements_18","text":"Explain how to use nav_list helper in documentation . Reduce left/right padding on smaller screens to increase width of main content column.","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_17","text":"Fix alignment issues with related posts #273 and \"Follow\" button in author profile #274 .","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#311","text":"","title":"3.1.1"},{"location":"openpgp.org/CHANGELOG/#bug-fix","text":"Fixed reading time bug when words_per_minute wasn't set in _config.yml #271","title":"Bug Fix"},{"location":"openpgp.org/CHANGELOG/#310","text":"","title":"3.1.0"},{"location":"openpgp.org/CHANGELOG/#enhancements_19","text":"Updated Font Awesome to version 4.6.1 Added optional GitHub and Bitbucket links to footer if set on site.author in _config.yml .","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_18","text":"Fixed Bitbucket URL typo in author sidebar.","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#303","text":"","title":"3.0.3"},{"location":"openpgp.org/CHANGELOG/#enhancements_20","text":"Rebuilt the entire theme: layouts, includes, stylesheets, scripts, you name it. Refreshed the look and feel while staying true to the original design of the theme (author sidebar/main content). Replaced grid system with Susy . Replaced Grunt tasks with npm scripts. Removed Google Fonts and replaced with system fonts to improve performance (they can be added back if desired) Greatly improved theme documentation . Increased the amount of sample posts, sample pages, and sample collections to throughly test the theme and edge-cases. Moved all sample content and assets out of master to keep it as clean as possible for forking. Added new layouts for splash pages, archives for jekyll-archives if enabled, and compress.html to improve performance. Added taxonomy links to posts (tags and categories). Added optional \"reading time\" meta data. Improved Liquid used for Twitter Cards and Open Graph data in <head> . Improved gallery include helper and added feature_row for use with splash page layout. Added Keybase.io, author web URI, and Bitbucket optional links to sidebar. Add feed.xml link to footer. Added a UI text data file to easily change all text found in the theme. Added LinkedIn to optional social share buttons. Added Facebook, Google+, and custom commenting options in addition to Disqus. Added optional breadcrumb links.","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#221","text":"","title":"2.2.1"},{"location":"openpgp.org/CHANGELOG/#220","text":"","title":"2.2.0"},{"location":"openpgp.org/CHANGELOG/#enhancements_21","text":"Add support for Jekyll 3.0 Minor updates to syntax highlighting CSS and theme documentation","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#213","text":"","title":"2.1.3"},{"location":"openpgp.org/CHANGELOG/#enhancements_22","text":"Cleaner print styles that remove the top navigation, social sharing buttons, and other elements not needed when printed.","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#212","text":"","title":"2.1.2"},{"location":"openpgp.org/CHANGELOG/#enhancements_23","text":"Add optional CodePen icon/url to author side bar #156 Documented Stackoverflow username explanation in _config.yml #157 Simplified Liquid in post-index.html to better handle year listings #166","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_19","text":"Cleanup Facebook related Open Graph meta tags #149 Corrected minor typos #158 #175","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#211","text":"","title":"2.1.1"},{"location":"openpgp.org/CHANGELOG/#enhancements_24","text":"Add optional XING profile link to author sidebar Include open graph meta tags for feature image (if assigned) #149 Create an include for feed footer","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_20","text":"Remove http protocol from Google search form on sample 404 page Only show related posts if there are one or more available Fix alignment of email address link in author sidebar","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#210","text":"","title":"2.1.0"},{"location":"openpgp.org/CHANGELOG/#enhancements_25","text":"Add optional social sharing buttons ( #42 ) Add Soundcloud, YouTube ( #95 ), Flickr ( #119 ), and Weibo ( #116 ) icons for use in author sidebar. Fix typos in posts and documentation and remove references to Less Include note about Octopress gem being optional Post author override support extended to the Atom feed ( #71 ) Only include email address in feed if specified in _config.yml or author _data Wrap all page content in #main to harmonize article and post index styles ( #86 ) Include new sample feature images for posts and pages Table of contents improvements: fix collapse toggle, indent nested elements, show on small screens, and create an _include for reusing in posts and pages. Include note about running Jekyll with bundle exec when using Bundler Fix home page path in top navigation Remove Google Authorship ( #120 ) Remove duplicate author content that displayed in div.article-author-bottom Removed unused _sass/print.scss styles Improve comments in .scss files","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#200","text":"","title":"2.0.0"},{"location":"openpgp.org/CHANGELOG/#133","text":"","title":"1.3.3"},{"location":"openpgp.org/CHANGELOG/#enhancements_26","text":"Added new icons and profile links for Stackoverflow, Dribbble, Pinterest, Foursquare, and Steam to the author bio sidebar. Cleaned up the Kramdown auto table of contents styling to be more readable Removed page width specific .less stylesheets and created mixins for easier updating Removed Modernizr since it wasn't being used Added pages to sitemap.xml Added category: to rake new_post task Minor typographic changes","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_21","text":"Corrected various broken links in README and Theme Setup.","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#131","text":"","title":"1.3.1"},{"location":"openpgp.org/CHANGELOG/#enhancements_27","text":"Cleaned up table of contents styling Reworked top navigation to be a better experience on small screens. Nav items now display vertically when the menu button is tapped, revealing links with larger touch targets.","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#120","text":"","title":"1.2.0"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_22","text":"Table weren't filling the entire width of the content container. They now scale at 100%. Thanks @dhruvbhatia","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#enhancements_28","text":"Decreased spacing between Markdown footnotes Removed dark background on footer Removed UPPERCASE styling on post titles in the index listing","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#114","text":"","title":"1.1.4"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_23","text":"Fix top navigation bug issue ( #10 ) for real this time. Remember to clear your floats kids.","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#113","text":"","title":"1.1.3"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_24","text":"Fix top navigation links that weren't click able on small viewports (Issue #10 ). Remove line wrap from top navigation links that may span multiple lines.","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#112","text":"","title":"1.1.2"},{"location":"openpgp.org/CHANGELOG/#enhancements_29","text":"Added Grunt build script for compiling Less/JavaScript and optimizing image assets. Added support for large image summary Twitter card. Stylesheet adjustments","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#111","text":"","title":"1.1.1"},{"location":"openpgp.org/CHANGELOG/#bug-fixes_25","text":"Removed Typeplate styles. Was causing issues with newer versions of Less and is no longer maintained.","title":"Bug Fixes"},{"location":"openpgp.org/CHANGELOG/#enhancements_30","text":"Added image attribution for post and page feature images. Added 404 page . Cleaned up various Less variables to better align with naming conventions used in other MM Jekyll themes. Removed Chrome Frame references. Added global CSS3 transitions to text and block elements. Improved typography in a few places.","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#102","text":"","title":"1.0.2"},{"location":"openpgp.org/CHANGELOG/#enhancements_31","text":"Google Analytics, Google Authorship, webmaster verifies, and Twitter card meta are now optional.","title":"Enhancements"},{"location":"openpgp.org/CHANGELOG/#101","text":"","title":"1.0.1"},{"location":"openpgp.org/README.minimal-mistakes/","text":"Minimal Mistakes Jekyll Theme Minimal Mistakes is a flexible two-column Jekyll theme. Perfect for hosting your personal site, blog, or portfolio on GitHub or self-hosting on your own server. As the name implies --- styling is purposely minimalistic to be enhanced and customized by you :smile:. See what's new in the CHANGELOG . The theme includes responsive layouts ( single , archive , and splash pages) that look great on mobile and desktop browsers. Installation and Setup / Preview the Theme Notable Features Compatible with Jekyll 3.x and GitHub Pages Support for Jekyll's built-in Sass/SCSS preprocessor Several layout options (single, archive, splash pages) SEO optimized with support for Twitter Cards and Open Graph data Optional header images, sidebars, table of contents, galleries, related posts, breadcrumb links, and more. Optional comments ( Disqus , Facebook , Google+, Discourse , static-based via Staticman , and custom). Optional analytics ( Google Analytics and custom). UI localized text: English (default), Spanish, French, and Turkish. Demo Pages Name Description Post with Header Image A post with a large header image. HTML Tags and Formatting Post A variety of common markup showing how the theme styles them. Syntax Highlighting Post Post displaying highlighted code. Post with a Gallery A post showing several images wrapped in <figure> elements. Sample Collection Page Single page from a collection. Categories Archive Posts grouped by category. Tags Archive Posts grouped by tags. For even more demo pages check the posts archive . Contributing Having trouble working with the theme? Found a typo in the documentation? Interested in adding a feature or fixing a bug ? Then by all means submit an issue or pull request . If this is your first pull request, it may be helpful to read up on the GitHub Flow first. Minimal Mistakes has been designed as a base for you to customize and fit your site's unique needs. Please keep this in mind when requesting features and/or submitting pull requests. If it's not something that most people will use, I probably won't consider it. When in doubt ask. This goes for author sidebar links and \"share button\" additions -- I have no intention of merging in every possibly option, the essentials are there to get you started :smile:. Pull Requests To help me out try to avoid creating pull requests on master and instead branch off of develop . It's much easier for me to test, merge, and roll them into new releases this way. Credits Creator Michael Rose https://mademistakes.com https://twitter.com/mmistakes https://github.com/mmistakes Icons + Demo Images: The Noun Project -- Garrett Knoll, Arthur Shlain, and tracy tam Font Awesome Unsplash Other: Jekyll jQuery Susy Breakpoint Magnific Popup FitVids.JS Greedy Navigation - lukejacksonn jQuery Smooth Scroll Stickyfill License The MIT License (MIT) Copyright (c) 2016 Michael Rose Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"[Minimal Mistakes Jekyll Theme](https://mmistakes.github.io/minimal-mistakes/)"},{"location":"openpgp.org/README.minimal-mistakes/#minimal-mistakes-jekyll-theme","text":"Minimal Mistakes is a flexible two-column Jekyll theme. Perfect for hosting your personal site, blog, or portfolio on GitHub or self-hosting on your own server. As the name implies --- styling is purposely minimalistic to be enhanced and customized by you :smile:. See what's new in the CHANGELOG . The theme includes responsive layouts ( single , archive , and splash pages) that look great on mobile and desktop browsers.","title":"Minimal Mistakes Jekyll Theme"},{"location":"openpgp.org/README.minimal-mistakes/#installation-and-setup-preview-the-theme","text":"","title":"Installation and Setup / Preview the Theme"},{"location":"openpgp.org/README.minimal-mistakes/#notable-features","text":"Compatible with Jekyll 3.x and GitHub Pages Support for Jekyll's built-in Sass/SCSS preprocessor Several layout options (single, archive, splash pages) SEO optimized with support for Twitter Cards and Open Graph data Optional header images, sidebars, table of contents, galleries, related posts, breadcrumb links, and more. Optional comments ( Disqus , Facebook , Google+, Discourse , static-based via Staticman , and custom). Optional analytics ( Google Analytics and custom). UI localized text: English (default), Spanish, French, and Turkish.","title":"Notable Features"},{"location":"openpgp.org/README.minimal-mistakes/#demo-pages","text":"Name Description Post with Header Image A post with a large header image. HTML Tags and Formatting Post A variety of common markup showing how the theme styles them. Syntax Highlighting Post Post displaying highlighted code. Post with a Gallery A post showing several images wrapped in <figure> elements. Sample Collection Page Single page from a collection. Categories Archive Posts grouped by category. Tags Archive Posts grouped by tags. For even more demo pages check the posts archive .","title":"Demo Pages"},{"location":"openpgp.org/README.minimal-mistakes/#contributing","text":"Having trouble working with the theme? Found a typo in the documentation? Interested in adding a feature or fixing a bug ? Then by all means submit an issue or pull request . If this is your first pull request, it may be helpful to read up on the GitHub Flow first. Minimal Mistakes has been designed as a base for you to customize and fit your site's unique needs. Please keep this in mind when requesting features and/or submitting pull requests. If it's not something that most people will use, I probably won't consider it. When in doubt ask. This goes for author sidebar links and \"share button\" additions -- I have no intention of merging in every possibly option, the essentials are there to get you started :smile:.","title":"Contributing"},{"location":"openpgp.org/README.minimal-mistakes/#pull-requests","text":"To help me out try to avoid creating pull requests on master and instead branch off of develop . It's much easier for me to test, merge, and roll them into new releases this way.","title":"Pull Requests"},{"location":"openpgp.org/README.minimal-mistakes/#credits","text":"","title":"Credits"},{"location":"openpgp.org/README.minimal-mistakes/#creator","text":"Michael Rose https://mademistakes.com https://twitter.com/mmistakes https://github.com/mmistakes","title":"Creator"},{"location":"openpgp.org/README.minimal-mistakes/#icons-demo-images","text":"The Noun Project -- Garrett Knoll, Arthur Shlain, and tracy tam Font Awesome Unsplash","title":"Icons + Demo Images:"},{"location":"openpgp.org/README.minimal-mistakes/#other","text":"Jekyll jQuery Susy Breakpoint Magnific Popup FitVids.JS Greedy Navigation - lukejacksonn jQuery Smooth Scroll Stickyfill","title":"Other:"},{"location":"openpgp.org/README.minimal-mistakes/#license","text":"The MIT License (MIT) Copyright (c) 2016 Michael Rose Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"openpgp.org/_about/01-about/","text":"{% include base_path %} OpenPGP is a non-proprietary format for authenticating or encrypting data, using public key cryptography. It is based on the original PGP (Pretty Good Privacy) software. Beginning in 1997, the OpenPGP Working Group was formed in the Internet Engineering Task Force (IETF) to define this standard that had formerly been a proprietary product since 1991. Over the past decade, PGP, and later OpenPGP, has become the standard for nearly all of the world's signed or encrypted email. OpenPGP also defines a standard format for certificates which, unlike most other certificate formats, enables webs of trust . OpenPGP formats and uses are specified in many IETF RFCs and drafts [^rfcs], so these standards can be implemented by any company without paying any licensing fees to anyone. [^rfcs]: RFC 3156 MIME Security with OpenPGP, RFC 4880 OpenPGP Message Format (the main one), RFC 5581 The Camellia Cipher in OpenPGP, RFC 6091 Using OpenPGP Keys for Transport Layer Security (TLS) Authentication, RFC 6637 Elliptic Curve Cryptography (ECC) in OpenPGP, and more .","title":"About"},{"location":"openpgp.org/_about/02-history/","text":"{% include base_path %} OpenPGP is a non-proprietary protocol for encrypting email using public key cryptography. The OpenPGP protocol defines standard formats for encrypted messages, signatures, private keys, and certificates for exchanging public keys. It is based on the Pretty Good Privacy (PGP) freeware software as originally developed in 1991 by Phil Zimmermann . For that, he was the target of a three-year criminal investigation, because the US government held that US export restrictions for cryptographic software were violated when PGP spread all around the world following its publication as freeware. Despite the lack of funding, the lack of any paid staff, the lack of a company to stand behind it, and despite government persecution, PGP became the most widely used email encryption software in the world. After the government dropped its case in early 1996, Zimmermann founded PGP Inc. That company and its intellectual property were acquired by Network Associates Inc (NAI) in December 1997. NAI continued to own and develop PGP products for commercial and freeware purposes. In 2002, NAI discontinued development and sales of PGP, and sold the rights to it to a new company, PGP Corporation. OpenPGP is the open standards version of NAI's PGP encryption protocol. The OpenPGP Working Group is seeking the qualification of OpenPGP as an Internet Standard as defined by the IETF. Each distinct version of an Internet standards-related specification is published as part of the \"Request for Comments\" (RFC) document series. OpenPGP is on the Internet Standards Track and is under active development. Many e-mail clients provide OpenPGP-compliant email security as described in RFC 3156. The current specification is RFC 4880 (November 2007), the successor to RFC 2440. RFC 4880 specifies a suite of required algorithms consisting of ElGamal encryption, DSA, Triple DES and SHA-1. In addition to these algorithms, the standard recommends RSA as described in PKCS #1 v1.5 for encryption and signing, as well as AES-128, CAST-128 and IDEA. Beyond these, many other algorithms are supported. The standard was extended to support Camellia cipher by RFC 5581 in 2009, and encryption based on elliptic curve cryptography (ECDSA, ECDH) by RFC 6637 in 2012. Support of EdDSA will be added by draft-koch-eddsa-for-openpgp-00 proposed in 2014. As far as we know, intelligence organizations aren't able to break it . Learn more about the technical specifications of OpenPGP on our page about the standards .","title":"History"},{"location":"openpgp.org/_about/03-standard/","text":"{% include base_path %} The OpenPGP Proposed Standard is defined by the OpenPGP Working Group of the Internet Engineering Task Force (IETF) in RFC 4880 . This document contains all the necessary information to develop interoperable applications based on the OpenPGP format. It describes the format and methods needed to read, check, generate, and write conforming encrypted messages, keys, and signatures. Besides the message format specified in RFC 4880, a collection of other OpenPGP-related RFCs, XEPs, and, Internet Drafts have been written: IETF RFCs IETF OpenPGP Working Group RFC 4880: OpenPGP Message Format RFC 3156: MIME Security with OpenPGP RFC 6637: Elliptic Curve Cryptography (ECC) in OpenPGP RFC 6091: Using OpenPGP Keys for Transport Layer Security (TLS) Authentication RFC 5581: The Camellia Cipher in OpenPGP XMPP Integration XEP-0027 (obsolete) XEP-0373: OpenPGP for XMPP XEP-0374: OpenPGP for XMPP Instant Messaging Current Internet Drafts The OpenPGP HTTP Keyserver Protocol (HKP) Using DANE to Associate OpenPGP public keys with email addresses Best Common Practise for using OPENPGPKEY records Media type literal packet in OpenPGP EdDSA for OpenPGP Linked Identites for OpenPGP URI Attributes for OpenPGP Modernizing the OpenPGP Message Format Forward Secrecy Extensions for OpenPGP OpenPGP Extensions for Device Certificates The OpenPGP Message Format The \"OpenPGP\" mail and news header field Obsolete RFCs RFC 1991: PGP Message Exchange Formats RFC 2015: MIME Security with Pretty Good Privacy (PGP) RFC 2440: OpenPGP Message Format","title":"Standard"},{"location":"openpgp.org/_about/03-standard/#ietf-rfcs","text":"IETF OpenPGP Working Group RFC 4880: OpenPGP Message Format RFC 3156: MIME Security with OpenPGP RFC 6637: Elliptic Curve Cryptography (ECC) in OpenPGP RFC 6091: Using OpenPGP Keys for Transport Layer Security (TLS) Authentication RFC 5581: The Camellia Cipher in OpenPGP","title":"IETF RFCs"},{"location":"openpgp.org/_about/03-standard/#xmpp-integration","text":"XEP-0027 (obsolete) XEP-0373: OpenPGP for XMPP XEP-0374: OpenPGP for XMPP Instant Messaging","title":"XMPP Integration"},{"location":"openpgp.org/_about/03-standard/#current-internet-drafts","text":"The OpenPGP HTTP Keyserver Protocol (HKP) Using DANE to Associate OpenPGP public keys with email addresses Best Common Practise for using OPENPGPKEY records Media type literal packet in OpenPGP EdDSA for OpenPGP Linked Identites for OpenPGP URI Attributes for OpenPGP Modernizing the OpenPGP Message Format Forward Secrecy Extensions for OpenPGP OpenPGP Extensions for Device Certificates The OpenPGP Message Format The \"OpenPGP\" mail and news header field","title":"Current Internet Drafts"},{"location":"openpgp.org/_about/03-standard/#obsolete-rfcs","text":"RFC 1991: PGP Message Exchange Formats RFC 2015: MIME Security with Pretty Good Privacy (PGP) RFC 2440: OpenPGP Message Format","title":"Obsolete RFCs"},{"location":"openpgp.org/_community/01-community/","text":"{% include base_path %} Community The following mailing lists are related to OpenPGP without connection to specific projects: IETF OpenPGP Working Group ModernCrypto Messaging Consulting The following organizations provide OpenPGP consulting. Confidential Technologies GmbH Giegerich & Partner GmbH g10 Code GmbH Intevation GmbH Organization Missing? If a organization is missing and you would like it included, please open a pull request at github.com/OpenPGP/openpgp.org . The organizations are ordered alphabetically within the sections.","title":"Community/Consulting"},{"location":"openpgp.org/_community/01-community/#community","text":"The following mailing lists are related to OpenPGP without connection to specific projects: IETF OpenPGP Working Group ModernCrypto Messaging","title":"Community"},{"location":"openpgp.org/_community/01-community/#consulting","text":"The following organizations provide OpenPGP consulting. Confidential Technologies GmbH Giegerich & Partner GmbH g10 Code GmbH Intevation GmbH","title":"Consulting"},{"location":"openpgp.org/_community/01-community/#organization-missing","text":"If a organization is missing and you would like it included, please open a pull request at github.com/OpenPGP/openpgp.org . The organizations are ordered alphabetically within the sections.","title":"Organization Missing?"},{"location":"openpgp.org/_drafts/04-why/","text":"{% include base_path %} Philip Zimmermann 27 Feb 2001 In the minds of many people, the phrase \"Public Key Infrastructure\" has become synonymous with \"Certificate Authority\". This is because in the X.509 world, the only PKI that we usually encounter is one built on a centralized CA. Matt Blaze made the cogent observation that commercial CAs will protect you against anyone who that CA refuses to accept money from. These CAs are \"baked into\" the major browsers, with no decisions by the users to trust them. Throughout this discussion, we refer to the IETF OpenPGP standard instead of PGP, which is a single company\u2019s implementation of the OpenPGP standard. There is indeed an OpenPGP Public Key Infrastructure. But what we call a PKI in the OpenPGP world is actually an emergent property of the sum total of all the keys in the user population, all the signatures on all those keys, the individual opinions of each OpenPGP user as to who they choose as trusted introducers, all the OpenPGP client software which runs the OpenPGP trust model and performs trust calculations for each client user, and the key servers which fluidly disseminate this collective knowledge. PGP has flourished for many years without the need to establish a centralized CA. This is because OpenPGP uses a decentralized system of trusted introducers, which are the same as a CA. OpenPGP allows anyone to sign anyone else\u2019s public key. When Alice signs Bob\u2019s key, she is introducing Bob\u2019s key to anyone who trusts Alice. If someone trusts Alice to introduce keys, then Alice is a trusted introducer in the mind of that observer. If I get a key signed by several introducers, and one of these introducers is Alice, and I trust Alice, then the key is certified by a trusted introducer. It may also be signed by other introducers, but they are not trusted by me, so they are not trusted introducers from my point of view. It is enough that Alice signed the key, because I trust Alice. It would be even better if the several introducers of that key includes two or more people that I trust. If the key is signed by two trusted introducers, then I can be more confident of the key\u2019s certification, because it is less likely that an attacker could trick two introducers that I trust into signing a bogus key. People can make mistakes, and sign the wrong key occasionally. OpenPGP has a fault tolerant architecture that allows me to require a key to be signed by two trusted introducers to be regarded as a valid key. This allows a higher level of confidence that the key truly belongs to the person named on the key. Of course, a clever attacker could trick two or more unsophisticated introducers into signing a bogus public key. But that does not matter in the OpenPGP trust model, because I don\u2019t trust unsophisticated introducers that can be so easily fooled. No one should. You should only trust honest and sophisticated introducers that understand what it means to sign a key, and will exercise due diligence in ascertaining the identity of the keyholder before signing the key in question. If only untrusted introducers sign a bogus key, no one will be fooled in the PGP trust model. You must tell the OpenPGP client software which introducers you trust, and the client software uses that knowledge to calculate if a key is properly certified by an introducer that you trust by looking for signatures from one of the trusted introducers. If the key lacks any signatures from introducers that you\u2019ve told the client software that you trust, the client software does not regard they key as certified, and won\u2019t let you use it (or at least will strongly urge you not to use it). Everyone gets to choose who they trust as introducers. Different OpenPGP users will have different sets of trusted introducers. In many cases, there will be overlap, because some introducers become widely trusted. They may even sign a great many keys, on a full time basis. Such people are called CAs in the X.509 world. There is nothing wrong with having CAs in the OpenPGP world. If many people choose to trust the same CA to act as an introducer, and they all configure their own copies of the OpenPGP client software to trust that CA, then the OpenPGP trust model acts like the X.509 trust model. In fact, the OpenPGP trust model is a proper superset of the centralized trust model we most often see in the X.509 world. There is no situation in the X.509 trust model that cannot be handled exactly the same way in the OpenPGP trust model. But OpenPGP can do so much more, and with a fault tolerant architecture, and more user control of his view of the OpenPGP PKI.","title":"Why OpenPGP\u2019s PKI is better than an X.509 PKI"},{"location":"openpgp.org/_pages/404/","text":"Sorry, but the page you were trying to view does not exist.","title":"Page Not Found"},{"location":"openpgp.org/_pages/home/","text":"{% include feature_row id=\"intro\" type=\"center\" %} {% include feature_row %}","title":"Home"},{"location":"openpgp.org/_posts/2016-08-22-new-website/","tags":["website"],"text":"Welcome to our new website. I took over the maintenance of openpgp.org and created new webpages using Jekyll and the Minimal Mistakes theme . The images are licensed under CC0 and were obtained from pixabay . The website is hosted on GitHub and I encourage all visitors to participate in creating and improving content of this website to make it the new main source of information related to the OpenPGP standard. We are open for pull requests .","title":"Welcome to openpgp.org"},{"location":"openpgp.org/_posts/2016-08-24-openpgp-conf/","tags":["conference"],"text":"The German Unix User Group (GUUG) is pleased to announce the first public conference on the OpenPGP protocol taking place in Cologne, Germany on September 8+9, 2016. OpenPGP.conf is a conference for users and implementers of the OpenPGP protocol, the popular standard for encrypted email communication and protection of data at rest. That protocol is the foundation of encryption software like PGP, GnuPG, Mailvelope, OpenKeyChain, and others. OpenPGP.conf is a place to meet, discuss, and learn about latest developments of OpenPGP aware applications and what technical measures can be deployed to repel the ever increasing trend to mass surveillance. Topics are: The OpenPGP protocol and its planned revision Current status of OpenPGP applications Interesting use cases Key discovery and distribution Ubiquitous end-to-end encryption Security analysis User interface studies Anonymous mail and the spam problem The full program is available at: https://openpgp-conf.org/program.html More information has been published at the conference site: https://openpgp-conf.org/","title":"First OpenPGP conference"},{"location":"openpgp.org/_software/01-01-gpg4o/","text":"Gpg4o is a Microsoft Outlook Add-in which implements the OpenPGP standard through GnuPG. It is available for Outlook 2010 \u2013 2016 and focuses on simple handling and good integration into Outlook. It also provides special features for commercial usage. Key Facts Developer/Publisher: Giegerich & Partner GmbH License: Proprietary (Closed Source) Price: gpg4o offers different types of enduser licenses Free version for no commercial use 56,36\u20ac for commercial use Web: https://www.giepa.de/products/gpg4o/?lang=en Help: Support is only available for pro users Forum FAQ","title":"gpg4o"},{"location":"openpgp.org/_software/01-01-gpg4o/#key-facts","text":"Developer/Publisher: Giegerich & Partner GmbH License: Proprietary (Closed Source) Price: gpg4o offers different types of enduser licenses Free version for no commercial use 56,36\u20ac for commercial use Web: https://www.giepa.de/products/gpg4o/?lang=en Help: Support is only available for pro users Forum FAQ","title":"Key Facts"},{"location":"openpgp.org/_software/01-02-gpg4win/","text":"Gpg4win initiative does not only offer email encryption but a whole suite of tools. It can also be used for file encryption directly in the file explorer. Gpg4win is also the official distribution of GnuPG for Windows. The international initiative wants to focus on the builder to easily create updated installers for GnuPG. Key Facts Developer/Publisher: Community License: Open Source (GNU GPL) Price: All tools are free of charge. Donations are desired. Web: https://www.gpg4win.de/index.html Help: Help is given through the communities Support Forum","title":"Gpg4win"},{"location":"openpgp.org/_software/01-02-gpg4win/#key-facts","text":"Developer/Publisher: Community License: Open Source (GNU GPL) Price: All tools are free of charge. Donations are desired. Web: https://www.gpg4win.de/index.html Help: Help is given through the communities Support Forum","title":"Key Facts"},{"location":"openpgp.org/_software/01-03-pep/","text":"Pretty Easy Privacy (pep) is a cross platform implementation of the OpenPGP standard. The email encryption is available for Microsoft Outlook on Windows as well as Android phones. The product focuses on automatic encryption so that a very simple usage for the end user is possible. Key Facts Developer/Publisher: p\u2261p Foundation License: Open Source (GNU GPL) Price: Android app: Free Outlook Add-In: $24.99 Web: https://prettyeasyprivacy.com Help: Help is given over email Support FAQ","title":"p\u2261p"},{"location":"openpgp.org/_software/01-03-pep/#key-facts","text":"Developer/Publisher: p\u2261p Foundation License: Open Source (GNU GPL) Price: Android app: Free Outlook Add-In: $24.99 Web: https://prettyeasyprivacy.com Help: Help is given over email Support FAQ","title":"Key Facts"},{"location":"openpgp.org/_software/01-04-enigmail/","text":"Enigmail is an Add-On for Postbox and Mozilla Thunderbird. With GnuPG, it implements the OpenPGP standard. The product enables email encryption and signing directly into Postbox and Thunderbird. The focus is on an easy interface for email security. Key Facts Developer/Publisher: Team of dedicated professionals License: Open Source (MPL) Price: Free. Donations desired Web: https://enigmail.net Help: Help is provided by volunteers Forum FAQ","title":"Enigmail"},{"location":"openpgp.org/_software/01-04-enigmail/#key-facts","text":"Developer/Publisher: Team of dedicated professionals License: Open Source (MPL) Price: Free. Donations desired Web: https://enigmail.net Help: Help is provided by volunteers Forum FAQ","title":"Key Facts"},{"location":"openpgp.org/_software/01-05-gpgtools/","text":"GPG Tools is a whole package of GPG based software tools. This suite contains four tools to bring encryption in all areas of your Mac system. Every software is based on GnuPG. The package contains an email plugin for Apple Mail , a key manager, a Service to use GPG in almost any application and an engine to use GPG with the command line. Key Facts Developer/Publisher: Community project License: Open Source (GNU GPL) Price: \u20ac 23.80 Web: https://gpgtools.org/ Help: Help is provided by the support team Forum FAQ","title":"GPG Tools"},{"location":"openpgp.org/_software/01-05-gpgtools/#key-facts","text":"Developer/Publisher: Community project License: Open Source (GNU GPL) Price: \u20ac 23.80 Web: https://gpgtools.org/ Help: Help is provided by the support team Forum FAQ","title":"Key Facts"},{"location":"openpgp.org/_software/01-05-mutt/","text":"Mutt is an email client for Unix operating systems. The client is text-based and uses GnuPG for the encryption. The focus is on a fast and clear usage for the user. Key Facts Developer/Publisher: Michael Elkins License: Open Source (GNU GPL) Price: Free Web: http://www.mutt.org/ Help: Help is provided by the community Wiki FAQ","title":"Mutt"},{"location":"openpgp.org/_software/01-05-mutt/#key-facts","text":"Developer/Publisher: Michael Elkins License: Open Source (GNU GPL) Price: Free Web: http://www.mutt.org/ Help: Help is provided by the community Wiki FAQ","title":"Key Facts"},{"location":"openpgp.org/_software/01-06-openkeychain/","text":"OpenKeychain is an Android app that brings secure communication, through the OpenPGP Standard, to your mobile phone. This app manages your keys and can also decrypt/encrypt data. It also integrates with other apps and brings the encryption feature to these apps. In association with K-9 Mail you have a secure email client for your Android phone. Key Facts Developer/Publisher: Team of dedicated professionals with community License: Open Source (GNU GPL) Price: Free. Donations desired Web: https://www.openkeychain.org Help: Help is provided by the community Forum FAQ","title":"OpenKeychain"},{"location":"openpgp.org/_software/01-06-openkeychain/#key-facts","text":"Developer/Publisher: Team of dedicated professionals with community License: Open Source (GNU GPL) Price: Free. Donations desired Web: https://www.openkeychain.org Help: Help is provided by the community Forum FAQ","title":"Key Facts"},{"location":"openpgp.org/_software/01-07-r2mail2/","text":"R2Mail2 is an email client for Android, with a driven OpenPGP implementation. The app focuses on the cryptographic implementation and good experience in association with email communication. Key Facts Developer/Publisher: rundQuadrat OG License: Proprietary (Closed Source) Price: Free. Donations desired Web: https://r2mail2.com/ Help: No support address available","title":"R2Mail2"},{"location":"openpgp.org/_software/01-07-r2mail2/#key-facts","text":"Developer/Publisher: rundQuadrat OG License: Proprietary (Closed Source) Price: Free. Donations desired Web: https://r2mail2.com/ Help: No support address available","title":"Key Facts"},{"location":"openpgp.org/_software/01-08-ipgmail/","text":"iPGMail is an iOS app that implements the OpenPGP standard. The app manages your keys and also brings all cryptographic features to your Apple device. In association with the iOS Mail application, it is also possible to take advantages of the OpenPGP implementation in your email communication. Key Facts Developer/Publisher: Wyllys Ingersoll License: Proprietary (Closed Source) Price: $1.99 Web: https://ipgmail.com/ Help: Help is provided by the author via the contact form Contact FAQ","title":"iPG Mail"},{"location":"openpgp.org/_software/01-08-ipgmail/#key-facts","text":"Developer/Publisher: Wyllys Ingersoll License: Proprietary (Closed Source) Price: $1.99 Web: https://ipgmail.com/ Help: Help is provided by the author via the contact form Contact FAQ","title":"Key Facts"},{"location":"openpgp.org/_software/01-09-seahorse/","text":"Seahorse is a Linux application that implements the OpenPGP standard. With this software, you can manage your keys and use the cryptographical features for files and texts. In association with the Evolution email client, you can also use the encryption features for your communication. Key Facts Developer/Publisher: Gnome.org community License: Open Source (GNU GPL) Price: Free. Donations desired Web: https://wiki.gnome.org/Apps/Seahorse Help: Help is provided by the community through a mail list Mail list","title":"Seahorse"},{"location":"openpgp.org/_software/01-09-seahorse/#key-facts","text":"Developer/Publisher: Gnome.org community License: Open Source (GNU GPL) Price: Free. Donations desired Web: https://wiki.gnome.org/Apps/Seahorse Help: Help is provided by the community through a mail list Mail list","title":"Key Facts"},{"location":"openpgp.org/_software/01-10-kleopatra/","text":"Kleopatra is a certificate manager and GUI for GnuPG. The software stores your OpenPGP certificates and keys. It is available for Windows and Linux. In association with the KMail email client, you can also take advantages of the cryptographical features for your communication via email. Key Facts Developer/Publisher: KDE License: Open Source (GNU GPL) Price: Free. Donations desired Web: https://www.kde.org/applications/utilities/kleopatra/ Help: Help is provided by the community Manual Forum","title":"Kleopatra"},{"location":"openpgp.org/_software/01-10-kleopatra/#key-facts","text":"Developer/Publisher: KDE License: Open Source (GNU GPL) Price: Free. Donations desired Web: https://www.kde.org/applications/utilities/kleopatra/ Help: Help is provided by the community Manual Forum","title":"Key Facts"},{"location":"openpgp.org/_software/01-11-mailvelope/","text":"Mailvelope is a browser extension for Google Chrome and Firefox that allows secure email communication based on the OpenPGP standard. It can be configured to work with arbitrary Webmail provider. The project focuses on easy usage and good integration with nearly every webmail client. Key Facts Developer/Publisher: Thomas Obernd\u00f6rfer with Community License: Open Source (GNU GPL) Price: Free Web: https://www.mailvelope.com/ Help: Help is provided by the CEO Email FAQ","title":"Mailvelope"},{"location":"openpgp.org/_software/01-11-mailvelope/#key-facts","text":"Developer/Publisher: Thomas Obernd\u00f6rfer with Community License: Open Source (GNU GPL) Price: Free Web: https://www.mailvelope.com/ Help: Help is provided by the CEO Email FAQ","title":"Key Facts"},{"location":"openpgp.org/_software/01-12-emclient/","text":"eM Client is a versatile email client with calendar, tasks and chat. It supports both PGP/MIME and traditional armored PGP and focuses on ease of use. eM Client synchronizes with Gmail, Office 365, Exchange and any IMAP/POP3/CalDAV/CardDAV/XMPP server. Key Facts Developer/Publisher: eM Client s.r.o. License: Proprietary (Closed Source) Price: eM Client offers two types of licenses Free license for non-commercial use with limitation to two accounts Commercial license for 49.95USD Web: https://www.emclient.com Help: Forum for Free license users Pro support for commercial license users FAQ","title":"eM Client"},{"location":"openpgp.org/_software/01-12-emclient/#key-facts","text":"Developer/Publisher: eM Client s.r.o. License: Proprietary (Closed Source) Price: eM Client offers two types of licenses Free license for non-commercial use with limitation to two accounts Commercial license for 49.95USD Web: https://www.emclient.com Help: Forum for Free license users Pro support for commercial license users FAQ","title":"Key Facts"},{"location":"openpgp.org/_software/01-13-psono/","text":"Psono is mainly a password manager, that allows with his browser extension for Google Chrome and Firefox to encrypt and decrypt messages based on the OpenPGP standard. It is tightly integrated with various Webmail provider. The private keys can be shared and synced with users and teams. Key Facts Developer/Publisher: Sascha Pfeiffer with Community License: Open Source (Apache 2.0) Price: Free Web: https://psono.com/ Help: Help is provided by the CEO Email Support Website Documentation Issue Tracker","title":"Psono"},{"location":"openpgp.org/_software/01-13-psono/#key-facts","text":"Developer/Publisher: Sascha Pfeiffer with Community License: Open Source (Apache 2.0) Price: Free Web: https://psono.com/ Help: Help is provided by the CEO Email Support Website Documentation Issue Tracker","title":"Key Facts"},{"location":"openpgp.org/_software/01-14-canary-mail/","text":"Canary Mail for Mac and iOS implements the OpenPGP standard. Encryption and decryption are handled seamlessly in-app. Users can generate and manage keys via the built-in key manager, as well as search for keys on SKS and Keybase servers. Canary also offers an optional zero-setup encryption mode for users who prefer automatic WhatsApp-like encryption. In addition, Canary offers a full range of powerful productivity features such as read notifications, snooze, follow-up reminders, to-dos, email templates, etc, and works with all popular IMAP and Exchange accounts, including Gmail, iCloud, Outlook, Office365, etc. Key Facts Developer/Publisher: Mailr Tech LLP License: Proprietary (Closed Source) Encryption Library: ObjectivePGP (Open Source) Price: Mac: $19.99 iOS: $9.99 Web: https://canarymail.io Help: Documentation and chat support Twitter","title":"Canary Mail"},{"location":"openpgp.org/_software/01-14-canary-mail/#key-facts","text":"Developer/Publisher: Mailr Tech LLP License: Proprietary (Closed Source) Encryption Library: ObjectivePGP (Open Source) Price: Mac: $19.99 iOS: $9.99 Web: https://canarymail.io Help: Documentation and chat support Twitter","title":"Key Facts"},{"location":"openpgp.org/_software/01-15-everdesk/","text":"EverDesk is the first and only email client which stores email messages as individual files together with your other files and documents in regular Windows folders, so you can keep all the information related to the same subject together and work with it in a simpler, more flexible, and more powerful way. It can send PGP-encrypted messages using a quick and easy 'Lock' button in Compose window. Key Facts Developer/Publisher: EverEZ Systems Ltd License: Proprietary (Closed Source) Price: $44.95 Web: https://www.everdesk.com/","title":"EverDesk"},{"location":"openpgp.org/_software/01-15-everdesk/#key-facts","text":"Developer/Publisher: EverEZ Systems Ltd License: Proprietary (Closed Source) Price: $44.95 Web: https://www.everdesk.com/","title":"Key Facts"},{"location":"openpgp.org/_software/01-16-thebat/","text":"The Bat! is a secure desktop email client for Windows, built to protect your correspondence against third-parties. The Bat! email program is able to process and store an unlimited number of messages and has no restriction on the number of email accounts accessible via IMAP, POP, MAPI protocols. Key Facts Developer/Publisher: Ritlabs, SRL License: Proprietary (Closed Source) Price: The Bat! offers two types of licenses The Bat! Home for 47.95\u20ac The Bat! Pro with additional encryption and portability features for 59.95\u20ac Web: https://www.ritlabs.com/en/products/thebat/ Help: Forum Customer Service FAQ","title":"The Bat!"},{"location":"openpgp.org/_software/01-16-thebat/#key-facts","text":"Developer/Publisher: Ritlabs, SRL License: Proprietary (Closed Source) Price: The Bat! offers two types of licenses The Bat! Home for 47.95\u20ac The Bat! Pro with additional encryption and portability features for 59.95\u20ac Web: https://www.ritlabs.com/en/products/thebat/ Help: Forum Customer Service FAQ","title":"Key Facts"},{"location":"openpgp.org/_software/01-17-autocrypt/","text":"Autocrypt is an Add-On for Mozilla Thunderbird. It implements OpenPGP in a very user friendly manner. Following the concepts of Autocrypt the user experience a full automated OpenPGP experience. Key Facts Developer/Publisher: Valodim License: Open Source (MPL) Price: Free. Web: Get Autocrypt","title":"Autocrypt"},{"location":"openpgp.org/_software/01-17-autocrypt/#key-facts","text":"Developer/Publisher: Valodim License: Open Source (MPL) Price: Free. Web: Get Autocrypt","title":"Key Facts"},{"location":"openpgp.org/_software/01-18-fairemail/","text":"Fully featured, open source, privacy friendly email app for Android. Uses OpenKeychain to decrypt messages and optionally encrypt messages. Key Facts Developer/Publisher: Marcel Bokhorst (M66B) License: Open Source (GNU GPLv3) Price: Free. Donations appreciated. Web: https://email.faircode.eu Help: XDA forum","title":"FairEmail"},{"location":"openpgp.org/_software/01-18-fairemail/#key-facts","text":"Developer/Publisher: Marcel Bokhorst (M66B) License: Open Source (GNU GPLv3) Price: Free. Donations appreciated. Web: https://email.faircode.eu Help: XDA forum","title":"Key Facts"},{"location":"openpgp.org/_software/01-19-claws/","text":"Claws Mail is a lightweight and fast email client based on GTK+ for Linux and Windows. It contains a plugin to enable email signing and encryption using GnuPG / gpgme, implementing the OpenPGP standard. Key Facts Developer/Publisher: Team of dedicated developers, translators and contributors License: Open Source (GPL) Price: Free. Donations welcome Web: https://claws-mail.org Help: Help is provided on their website User Manual FAQ","title":"Claws Mail"},{"location":"openpgp.org/_software/01-19-claws/#key-facts","text":"Developer/Publisher: Team of dedicated developers, translators and contributors License: Open Source (GPL) Price: Free. Donations welcome Web: https://claws-mail.org Help: Help is provided on their website User Manual FAQ","title":"Key Facts"},{"location":"openpgp.org/_software/01-20-postbox/","text":"Postbox for macOS and Windows is a power email app that has the ease of use of Apple Mail, but with more features and configuration options to handle high-volume workloads. Enigmail for Postbox, an add-on that uses GnuPG to implement the OpenPGP standard, enables email encryption and signing directly within the app. Key Facts Developer/Publisher: Postbox, Inc. License: Proprietary (Closed Source) Encryption Library: OpenPGP (Open Source) Price: 1-Year License: $29.00 Lifetime License: $59.00 Web: https://postbox-inc.com Help: Documentation and Help Center Twitter","title":"Postbox"},{"location":"openpgp.org/_software/01-20-postbox/#key-facts","text":"Developer/Publisher: Postbox, Inc. License: Proprietary (Closed Source) Encryption Library: OpenPGP (Open Source) Price: 1-Year License: $29.00 Lifetime License: $59.00 Web: https://postbox-inc.com Help: Documentation and Help Center Twitter","title":"Key Facts"},{"location":"openpgp.org/_software/01-20-safe/","text":"Safe Easy Privacy is a privacy tool. Import, Create and Share PGP keys easily via AirDrop, Safe Codes and Safe Secure links. Encrypt and Decrypt messages. Key Facts Developer/Publisher: Safe Mobile License: Proprietary (Closed Source) Price: Free Web: https://safepgpapp.com/ Help: Help is provided by the author via the contact form Contact","title":"Safe Easy Privacy"},{"location":"openpgp.org/_software/01-20-safe/#key-facts","text":"Developer/Publisher: Safe Mobile License: Proprietary (Closed Source) Price: Free Web: https://safepgpapp.com/ Help: Help is provided by the author via the contact form Contact","title":"Key Facts"},{"location":"openpgp.org/_software/01-21-pgpro/","text":"PGPro can encrypt and decrypt messages as well as manage your PGP keys. It is free, simple and lightweight. Everything stays on your device. PGPro is open-source and made in Switzerland \ud83c\udde8\ud83c\udded You can Encrypt and Decrypt your Messages Import Keys from File, Clipboard and the Web ( Web Key Directory and OpenPGP Keyserver ) Export all Keys to a GPG Keyring file Share Keys via Share Sheet Generate new 3072-bit RSA Keys Limitations: PGPro does not support ECC Keys PGPro does not support sign-only keys PGPro does not support symmetric encryption Key Facts Developer/Publisher: Luca N\u00e4f License: Open Source (GNU GPL-3.0) Encryption Library: ObjectivePGP (Open Source) Price: Free. Donations accepted Web: https://pgpro.app Help: Help is provided in the FAQ and by the developer via email FAQ Email","title":"PGPro"},{"location":"openpgp.org/_software/01-21-pgpro/#key-facts","text":"Developer/Publisher: Luca N\u00e4f License: Open Source (GNU GPL-3.0) Encryption Library: ObjectivePGP (Open Source) Price: Free. Donations accepted Web: https://pgpro.app Help: Help is provided in the FAQ and by the developer via email FAQ Email","title":"Key Facts"},{"location":"openpgp.org/_software/01-22-thunderbird/","text":"The Email Client Mozilla Thunderbird supports OpenPGP directly since version 78. Key Facts Developer/Publisher: Mozilla License: Open Source (MPL) Price: Free ( Donations ) Web: Get Thunderbird FAQ: OpenPGP in Thunderbird - HOWTO and FAQ","title":"Thunderbird"},{"location":"openpgp.org/_software/01-22-thunderbird/#key-facts","text":"Developer/Publisher: Mozilla License: Open Source (MPL) Price: Free ( Donations ) Web: Get Thunderbird FAQ: OpenPGP in Thunderbird - HOWTO and FAQ","title":"Key Facts"},{"location":"openpgp.org/_software/01-software/","text":"{% include base_path %} {% include toc %} All email applications on this page support the OpenPGP standard either directly or with additional software. The authors of this webpage are not actively participating in the development of each of these third-party apps. No security audits have been done by us and, thus, we cannot provide any security guarantees. Windows Claws Mail eM Client EverDesk The Bat! Outlook: gpg4o Gpg4win p\u2261p Postbox using Enigmail Thunderbird : Autocrypt for versions <78 Enigmail for versions <78 Mac OS Apple Mail: GPGTools Canary Mail Mutt Postbox using Enigmail Thunderbird : Autocrypt for versions <78 Enigmail for versions <78 Android FairEmail K-9 Mail: OpenKeychain p\u2261p R2Mail2 iOS Canary Mail iPGMail PGPro Safe Easy Privacy Linux Claws Mail Evolution: Seahorse KMail: Kleopatra Mutt Thunderbird : Autocrypt for versions <78 Enigmail for versions <78 Browser Plugins Mailvelope FlowCrypt (Gmail) Psono Webmail Provider with Browser Plugins A lot of webmail providers support email encryption via the OpenPGP standard using Mailvelope . The Mailvelope website provides a list of supported webmail providers . Providers with help pages: GMX Posteo WEB.DE Pre-configured (authorized) providers: Gmail mail.ru Outlook.com volny.cz Yahoo Zoho Mail Other authorized providers with API support: mailbox.org riseup.net Roundcube Webmail Provider with In-Browser Cryptography In contrast to the previous section, the following webmail providers do not require the installation of additional browser plugins, instead OpenPGP is implemented in JavaScript provided directly by the website. While these are easier to set up and provide basic security guarantees with OpenPGP, some people don't consider these \"end-to-end secure\" . Hushmail (limited OpenPGP support) Mailfence postale.io ProtonMail Project Missing? If a project is missing and you would like it included, please open a pull request at github.com/OpenPGP/openpgp.org . Please note that we only include published, working software, which implements the standard. The software is ordered alphabetically within the sections.","title":"Email Encryption"},{"location":"openpgp.org/_software/01-software/#windows","text":"Claws Mail eM Client EverDesk The Bat! Outlook: gpg4o Gpg4win p\u2261p Postbox using Enigmail Thunderbird : Autocrypt for versions <78 Enigmail for versions <78","title":"Windows"},{"location":"openpgp.org/_software/01-software/#mac-os","text":"Apple Mail: GPGTools Canary Mail Mutt Postbox using Enigmail Thunderbird : Autocrypt for versions <78 Enigmail for versions <78","title":"Mac OS"},{"location":"openpgp.org/_software/01-software/#android","text":"FairEmail K-9 Mail: OpenKeychain p\u2261p R2Mail2","title":"Android"},{"location":"openpgp.org/_software/01-software/#ios","text":"Canary Mail iPGMail PGPro Safe Easy Privacy","title":"iOS"},{"location":"openpgp.org/_software/01-software/#linux","text":"Claws Mail Evolution: Seahorse KMail: Kleopatra Mutt Thunderbird : Autocrypt for versions <78 Enigmail for versions <78","title":"Linux"},{"location":"openpgp.org/_software/01-software/#browser-plugins","text":"Mailvelope FlowCrypt (Gmail) Psono","title":"Browser Plugins"},{"location":"openpgp.org/_software/01-software/#webmail-provider-with-browser-plugins","text":"A lot of webmail providers support email encryption via the OpenPGP standard using Mailvelope . The Mailvelope website provides a list of supported webmail providers . Providers with help pages: GMX Posteo WEB.DE Pre-configured (authorized) providers: Gmail mail.ru Outlook.com volny.cz Yahoo Zoho Mail Other authorized providers with API support: mailbox.org riseup.net Roundcube","title":"Webmail Provider with Browser Plugins"},{"location":"openpgp.org/_software/01-software/#webmail-provider-with-in-browser-cryptography","text":"In contrast to the previous section, the following webmail providers do not require the installation of additional browser plugins, instead OpenPGP is implemented in JavaScript provided directly by the website. While these are easier to set up and provide basic security guarantees with OpenPGP, some people don't consider these \"end-to-end secure\" . Hushmail (limited OpenPGP support) Mailfence postale.io ProtonMail","title":"Webmail Provider with In-Browser Cryptography"},{"location":"openpgp.org/_software/01-software/#project-missing","text":"If a project is missing and you would like it included, please open a pull request at github.com/OpenPGP/openpgp.org . Please note that we only include published, working software, which implements the standard. The software is ordered alphabetically within the sections.","title":"Project Missing?"},{"location":"openpgp.org/_software/02-server/","text":"{% include base_path %} {% include toc %} All applications on this page implement the OpenPGP standard. The authors of this webpage are not actively participating in the development of each of these third-party apps. No security audits have been done by us and, thus, we cannot provide any security guarantees. Webmail Clients Mailpile Pixelated Roundcube Keyservers Hockeypuck Keyserver (in Go) keys.openpgp.org (in Rust) Mailvelope Keyserver (in JS) Nicknym , from the LEAP project Nyms SKS Keyserver (in OCaml) Mailing List Software Mailman 3 PGP plugin Schleuder encrypted mailinglist Password Managers Passbolt Project Missing? If a project is missing and you would like it included, please open a pull request at github.com/OpenPGP/openpgp.org . Please note that we only include published, working software, which implements the standard. The software is ordered alphabetically within the sections.","title":"Server"},{"location":"openpgp.org/_software/02-server/#webmail-clients","text":"Mailpile Pixelated Roundcube","title":"Webmail Clients"},{"location":"openpgp.org/_software/02-server/#keyservers","text":"Hockeypuck Keyserver (in Go) keys.openpgp.org (in Rust) Mailvelope Keyserver (in JS) Nicknym , from the LEAP project Nyms SKS Keyserver (in OCaml)","title":"Keyservers"},{"location":"openpgp.org/_software/02-server/#mailing-list-software","text":"Mailman 3 PGP plugin Schleuder encrypted mailinglist","title":"Mailing List Software"},{"location":"openpgp.org/_software/02-server/#password-managers","text":"Passbolt","title":"Password Managers"},{"location":"openpgp.org/_software/02-server/#project-missing","text":"If a project is missing and you would like it included, please open a pull request at github.com/OpenPGP/openpgp.org . Please note that we only include published, working software, which implements the standard. The software is ordered alphabetically within the sections.","title":"Project Missing?"},{"location":"openpgp.org/_software/03-developer-tools/","text":"{% include base_path %} All applications on this page implement the OpenPGP standard. The authors of this webpage are not actively participating in the development of each of these third-party apps. No security audits have been done by us and, thus, we cannot provide any security guarantees. OpenPGP Libraries Bouncy Castle (Low-level Java/C#) calccrypto/OpenPGP (C++) GnuPG Made Easy (GPGME) (C, with Python and Lisp bindings) Golang OpenPGP (Go) Haskell OpenPGP (Haskell) hOpenPGP (Haskell) IPWorks OpenPGP (.NET, Java, C++, Python, Delphi, PHP, Node.js, Android, iOS) kbpgp (JavaScript) NeoPG (C++, GnuPG fork as a library) NetPGP (C, with Python, Perl and Lua bindings) ObjectivePGP (Objective C) OCaml PGP (OCaml) OpenKeychain API (Java) OpenPGP-PHP (PHP) OpenPGP.js (Javascript) PGPainless (Java) PGPy (Python) RNP (C++) Sequoia PGP (Rust) Swift-PGP (Swift) Libraries Supporting OpenPGP Smartcards GnuPG Made Easy (GPGME) (C, with Python and Lisp bindings) Hardware Security SDK (Java) OpenSC (C) Developer Tools Debian Package Signing with GnuPG Distributed Key Generation and Threshold Cryptography for OpenPGP Git Tools - Signing Your Work with GnuPG Monkeysign pass: the standard unix password manager Project Missing? If a project is missing and you would like it included, please open a pull request at github.com/OpenPGP/openpgp.org . Please note that we only include published, working software, which implements the standard. The software is ordered alphabetically within the sections.","title":"Developer Libraries/Tools"},{"location":"openpgp.org/_software/03-developer-tools/#openpgp-libraries","text":"Bouncy Castle (Low-level Java/C#) calccrypto/OpenPGP (C++) GnuPG Made Easy (GPGME) (C, with Python and Lisp bindings) Golang OpenPGP (Go) Haskell OpenPGP (Haskell) hOpenPGP (Haskell) IPWorks OpenPGP (.NET, Java, C++, Python, Delphi, PHP, Node.js, Android, iOS) kbpgp (JavaScript) NeoPG (C++, GnuPG fork as a library) NetPGP (C, with Python, Perl and Lua bindings) ObjectivePGP (Objective C) OCaml PGP (OCaml) OpenKeychain API (Java) OpenPGP-PHP (PHP) OpenPGP.js (Javascript) PGPainless (Java) PGPy (Python) RNP (C++) Sequoia PGP (Rust) Swift-PGP (Swift)","title":"OpenPGP Libraries"},{"location":"openpgp.org/_software/03-developer-tools/#libraries-supporting-openpgp-smartcards","text":"GnuPG Made Easy (GPGME) (C, with Python and Lisp bindings) Hardware Security SDK (Java) OpenSC (C)","title":"Libraries Supporting OpenPGP Smartcards"},{"location":"openpgp.org/_software/03-developer-tools/#developer-tools","text":"Debian Package Signing with GnuPG Distributed Key Generation and Threshold Cryptography for OpenPGP Git Tools - Signing Your Work with GnuPG Monkeysign pass: the standard unix password manager","title":"Developer Tools"},{"location":"openpgp.org/_software/03-developer-tools/#project-missing","text":"If a project is missing and you would like it included, please open a pull request at github.com/OpenPGP/openpgp.org . Please note that we only include published, working software, which implements the standard. The software is ordered alphabetically within the sections.","title":"Project Missing?"},{"location":"openpgp.org/_software/04-01-gpgfrontend/","text":"GpgFrontend is a modern, easy-to-use, compact, cross-platform, and installation-free gpg front-end tool. By using GpgFrontend, you can quickly encrypt and decrypt text or files. Or at the same time as the above operations, you can add your own signature to let others know that this document or this paragraph of text was issued by you. Furthermore, it visualizes most of the common operations of gpg commands. It aims to allow ordinary users to quickly use gpg and make professional users more convenient. GpgFrontend supports some new features of OpenPGP. Features: Open source, free, no need to install. Can run on Windows, Linux and macOS. Just double-click, and then you can use it freely. Before use, you only need to install gnupg. A tiny tool of a few MB. Supports multiple languages. Don\u2019t forget to help me translate this software. Key Facts Developer/Publisher: Saturneric License: Open Source (GNU GPL-3.0) Price: Free. Web: GitHub Page GitHub Repository Help: Help is provided in the README.md and by the developer via email README.md Email","title":"GPGFrontend"},{"location":"openpgp.org/_software/04-01-gpgfrontend/#key-facts","text":"Developer/Publisher: Saturneric License: Open Source (GNU GPL-3.0) Price: Free. Web: GitHub Page GitHub Repository Help: Help is provided in the README.md and by the developer via email README.md Email","title":"Key Facts"},{"location":"openpgp.org/_software/04-misc/","text":"{% include base_path %} All applications on this page implement the OpenPGP standard. The authors of this webpage are not actively participating in the development of each of these third-party apps. No security audits have been done by us and, thus, we cannot provide any security guarantees. PC Applications GpgFrontend (Windows, macOS, Linux) Web-Based Tools Pipefile (Secure File Sharing) Cryptonomica (Identity Verification) Apps Pignus (iOS) neutriNote (Android) Project Missing? If a project is missing and you would like it included, please open a pull request at github.com/OpenPGP/openpgp.org . Please note that we only include published, working software, which implements the standard. The software is ordered alphabetically within the sections.","title":"Miscellaneous Tools"},{"location":"openpgp.org/_software/04-misc/#pc-applications","text":"GpgFrontend (Windows, macOS, Linux)","title":"PC Applications"},{"location":"openpgp.org/_software/04-misc/#web-based-tools","text":"Pipefile (Secure File Sharing) Cryptonomica (Identity Verification)","title":"Web-Based Tools"},{"location":"openpgp.org/_software/04-misc/#apps","text":"Pignus (iOS) neutriNote (Android)","title":"Apps"},{"location":"openpgp.org/_software/04-misc/#project-missing","text":"If a project is missing and you would like it included, please open a pull request at github.com/OpenPGP/openpgp.org . Please note that we only include published, working software, which implements the standard. The software is ordered alphabetically within the sections.","title":"Project Missing?"}]}